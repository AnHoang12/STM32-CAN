
GROUP14-Practice1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049b0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08004b40  08004b40  00005b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c08  08004c08  0000607c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c08  08004c08  00005c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c10  08004c10  0000607c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c10  08004c10  00005c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c14  08004c14  00005c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004c18  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000607c  2**0
                  CONTENTS
 10 .bss          00001300  2000007c  2000007c  0000607c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000137c  2000137c  0000607c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000607c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a93b  00000000  00000000  000060ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c05  00000000  00000000  000109e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000898  00000000  00000000  000125f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000693  00000000  00000000  00012e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001b78  00000000  00000000  0001351b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aa22  00000000  00000000  00015093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000babe9  00000000  00000000  0001fab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000da69e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027b4  00000000  00000000  000da6e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  000dce98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b28 	.word	0x08004b28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08004b28 	.word	0x08004b28

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint16_t i,j = 0;
 8000566:	2300      	movs	r3, #0
 8000568:	81fb      	strh	r3, [r7, #14]
	uint16_t Consecutive_Cntr = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	81bb      	strh	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fec9 	bl	8001304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f86b 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f9dd 	bl	8000934 <MX_GPIO_Init>
  MX_CAN1_Init();
 800057a:	f000 f8d1 	bl	8000720 <MX_CAN1_Init>
  MX_CAN2_Init();
 800057e:	f000 f93f 	bl	8000800 <MX_CAN2_Init>
  MX_USART3_UART_Init();
 8000582:	f000 f9ad 	bl	80008e0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  MX_CAN1_Setup();
 8000586:	f000 fa51 	bl	8000a2c <MX_CAN1_Setup>
  MX_CAN2_Setup();
 800058a:	f000 fa63 	bl	8000a54 <MX_CAN2_Setup>
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 800058e:	4b26      	ldr	r3, [pc, #152]	@ (8000628 <main+0xc8>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	68da      	ldr	r2, [r3, #12]
 8000594:	4b24      	ldr	r3, [pc, #144]	@ (8000628 <main+0xc8>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f042 0220 	orr.w	r2, r2, #32
 800059c:	60da      	str	r2, [r3, #12]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	CAN1_Send_Message();
 800059e:	f000 fb7b 	bl	8000c98 <CAN1_Send_Message>
	HAL_Delay(500);
 80005a2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005a6:	f000 ff1f 	bl	80013e8 <HAL_Delay>

	CAN2_Send_Message();
 80005aa:	f000 fbab 	bl	8000d04 <CAN2_Send_Message>
	HAL_Delay(4000);
 80005ae:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80005b2:	f000 ff19 	bl	80013e8 <HAL_Delay>


    if(!BtnU) /*IG OFF->ON stimulation*/
 80005b6:	2102      	movs	r1, #2
 80005b8:	481c      	ldr	r0, [pc, #112]	@ (800062c <main+0xcc>)
 80005ba:	f002 f8eb 	bl	8002794 <HAL_GPIO_ReadPin>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d1ec      	bne.n	800059e <main+0x3e>
    {
      delay(20);
 80005c4:	2014      	movs	r0, #20
 80005c6:	f000 fb21 	bl	8000c0c <delay>
      USART3_SendString((uint8_t *)"IG OFF ");
 80005ca:	4819      	ldr	r0, [pc, #100]	@ (8000630 <main+0xd0>)
 80005cc:	f000 fa56 	bl	8000a7c <USART3_SendString>
      int8_t crc_error_data[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}; // Example incorrect data
 80005d0:	4a18      	ldr	r2, [pc, #96]	@ (8000634 <main+0xd4>)
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005d8:	e883 0003 	stmia.w	r3, {r0, r1}
      USART3_SendString((uint8_t *)"CAN1 TX: ");
 80005dc:	4816      	ldr	r0, [pc, #88]	@ (8000638 <main+0xd8>)
 80005de:	f000 fa4d 	bl	8000a7c <USART3_SendString>
      PrintCANLog(CAN1_pHeader.StdId, crc_error_data);
 80005e2:	4b16      	ldr	r3, [pc, #88]	@ (800063c <main+0xdc>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	1d3a      	adds	r2, r7, #4
 80005ea:	4611      	mov	r1, r2
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 fa5f 	bl	8000ab0 <PrintCANLog>
	  // Send message 0x12 with incorrect data
	  HAL_CAN_AddTxMessage(&hcan1, &CAN1_pHeader, crc_error_data, &CAN1_pTxMailbox);
 80005f2:	1d3a      	adds	r2, r7, #4
 80005f4:	4b12      	ldr	r3, [pc, #72]	@ (8000640 <main+0xe0>)
 80005f6:	4911      	ldr	r1, [pc, #68]	@ (800063c <main+0xdc>)
 80005f8:	4812      	ldr	r0, [pc, #72]	@ (8000644 <main+0xe4>)
 80005fa:	f001 f939 	bl	8001870 <HAL_CAN_AddTxMessage>

      CheckForMissingMessage();
 80005fe:	f000 fc17 	bl	8000e30 <CheckForMissingMessage>
      while(!BtnU);
 8000602:	bf00      	nop
 8000604:	2102      	movs	r1, #2
 8000606:	4809      	ldr	r0, [pc, #36]	@ (800062c <main+0xcc>)
 8000608:	f002 f8c4 	bl	8002794 <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0f8      	beq.n	8000604 <main+0xa4>
      MX_CAN1_Setup();
 8000612:	f000 fa0b 	bl	8000a2c <MX_CAN1_Setup>
      MX_CAN2_Setup();
 8000616:	f000 fa1d 	bl	8000a54 <MX_CAN2_Setup>
      USART3_SendString((uint8_t *)"-> IG ON \n");
 800061a:	480b      	ldr	r0, [pc, #44]	@ (8000648 <main+0xe8>)
 800061c:	f000 fa2e 	bl	8000a7c <USART3_SendString>
      delay(20);
 8000620:	2014      	movs	r0, #20
 8000622:	f000 faf3 	bl	8000c0c <delay>
  {
 8000626:	e7ba      	b.n	800059e <main+0x3e>
 8000628:	200000e8 	.word	0x200000e8
 800062c:	40020000 	.word	0x40020000
 8000630:	08004b40 	.word	0x08004b40
 8000634:	08004b60 	.word	0x08004b60
 8000638:	08004b48 	.word	0x08004b48
 800063c:	20000130 	.word	0x20000130
 8000640:	200001e8 	.word	0x200001e8
 8000644:	20000098 	.word	0x20000098
 8000648:	08004b54 	.word	0x08004b54

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	@ 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	2230      	movs	r2, #48	@ 0x30
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f003 fde4 	bl	8004228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	4b28      	ldr	r3, [pc, #160]	@ (8000718 <SystemClock_Config+0xcc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000678:	4a27      	ldr	r2, [pc, #156]	@ (8000718 <SystemClock_Config+0xcc>)
 800067a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800067e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000680:	4b25      	ldr	r3, [pc, #148]	@ (8000718 <SystemClock_Config+0xcc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	4b22      	ldr	r3, [pc, #136]	@ (800071c <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a21      	ldr	r2, [pc, #132]	@ (800071c <SystemClock_Config+0xd0>)
 8000696:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b1f      	ldr	r3, [pc, #124]	@ (800071c <SystemClock_Config+0xd0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a8:	2302      	movs	r3, #2
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b0:	2310      	movs	r3, #16
 80006b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006bc:	2308      	movs	r3, #8
 80006be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80006c0:	2350      	movs	r3, #80	@ 0x50
 80006c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0320 	add.w	r3, r7, #32
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 f89b 	bl	800280c <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006dc:	f000 fc0a 	bl	8000ef4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e4:	2302      	movs	r3, #2
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2102      	movs	r1, #2
 80006fe:	4618      	mov	r0, r3
 8000700:	f002 fafc 	bl	8002cfc <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070a:	f000 fbf3 	bl	8000ef4 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3750      	adds	r7, #80	@ 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000724:	4b32      	ldr	r3, [pc, #200]	@ (80007f0 <MX_CAN1_Init+0xd0>)
 8000726:	4a33      	ldr	r2, [pc, #204]	@ (80007f4 <MX_CAN1_Init+0xd4>)
 8000728:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 800072a:	4b31      	ldr	r3, [pc, #196]	@ (80007f0 <MX_CAN1_Init+0xd0>)
 800072c:	2215      	movs	r2, #21
 800072e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000730:	4b2f      	ldr	r3, [pc, #188]	@ (80007f0 <MX_CAN1_Init+0xd0>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000736:	4b2e      	ldr	r3, [pc, #184]	@ (80007f0 <MX_CAN1_Init+0xd0>)
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 800073c:	4b2c      	ldr	r3, [pc, #176]	@ (80007f0 <MX_CAN1_Init+0xd0>)
 800073e:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8000742:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000744:	4b2a      	ldr	r3, [pc, #168]	@ (80007f0 <MX_CAN1_Init+0xd0>)
 8000746:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800074a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800074c:	4b28      	ldr	r3, [pc, #160]	@ (80007f0 <MX_CAN1_Init+0xd0>)
 800074e:	2200      	movs	r2, #0
 8000750:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000752:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <MX_CAN1_Init+0xd0>)
 8000754:	2200      	movs	r2, #0
 8000756:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000758:	4b25      	ldr	r3, [pc, #148]	@ (80007f0 <MX_CAN1_Init+0xd0>)
 800075a:	2200      	movs	r2, #0
 800075c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800075e:	4b24      	ldr	r3, [pc, #144]	@ (80007f0 <MX_CAN1_Init+0xd0>)
 8000760:	2200      	movs	r2, #0
 8000762:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000764:	4b22      	ldr	r3, [pc, #136]	@ (80007f0 <MX_CAN1_Init+0xd0>)
 8000766:	2200      	movs	r2, #0
 8000768:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800076a:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <MX_CAN1_Init+0xd0>)
 800076c:	2200      	movs	r2, #0
 800076e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000770:	481f      	ldr	r0, [pc, #124]	@ (80007f0 <MX_CAN1_Init+0xd0>)
 8000772:	f000 fe5d 	bl	8001430 <HAL_CAN_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800077c:	f000 fbba 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  //Config header CAN1
  CAN1_pHeader.DLC = 8;
 8000780:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <MX_CAN1_Init+0xd8>)
 8000782:	2208      	movs	r2, #8
 8000784:	611a      	str	r2, [r3, #16]
  CAN1_pHeader.ExtId = 0;
 8000786:	4b1c      	ldr	r3, [pc, #112]	@ (80007f8 <MX_CAN1_Init+0xd8>)
 8000788:	2200      	movs	r2, #0
 800078a:	605a      	str	r2, [r3, #4]
  CAN1_pHeader.RTR = CAN_RTR_DATA;
 800078c:	4b1a      	ldr	r3, [pc, #104]	@ (80007f8 <MX_CAN1_Init+0xd8>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  CAN1_pHeader.IDE = CAN_ID_STD;
 8000792:	4b19      	ldr	r3, [pc, #100]	@ (80007f8 <MX_CAN1_Init+0xd8>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  CAN1_pHeader.StdId = 0x012;
 8000798:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <MX_CAN1_Init+0xd8>)
 800079a:	2212      	movs	r2, #18
 800079c:	601a      	str	r2, [r3, #0]
  CAN1_pHeader.TransmitGlobalTime = ENABLE;
 800079e:	4b16      	ldr	r3, [pc, #88]	@ (80007f8 <MX_CAN1_Init+0xd8>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	751a      	strb	r2, [r3, #20]

  //Config filter CAN1
  CAN1_sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80007a4:	4b15      	ldr	r3, [pc, #84]	@ (80007fc <MX_CAN1_Init+0xdc>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	621a      	str	r2, [r3, #32]
  CAN1_sFilterConfig.FilterBank = 1;
 80007aa:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <MX_CAN1_Init+0xdc>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	615a      	str	r2, [r3, #20]
  CAN1_sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80007b0:	4b12      	ldr	r3, [pc, #72]	@ (80007fc <MX_CAN1_Init+0xdc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  CAN1_sFilterConfig.FilterIdHigh = 0x012 << 5;
 80007b6:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <MX_CAN1_Init+0xdc>)
 80007b8:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80007bc:	601a      	str	r2, [r3, #0]
  CAN1_sFilterConfig.FilterIdLow = 0x0000;
 80007be:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <MX_CAN1_Init+0xdc>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	605a      	str	r2, [r3, #4]
  CAN1_sFilterConfig.FilterMaskIdHigh = 0;//0x0A2 << 5;
 80007c4:	4b0d      	ldr	r3, [pc, #52]	@ (80007fc <MX_CAN1_Init+0xdc>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  CAN1_sFilterConfig.FilterMaskIdLow = 0x0000;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <MX_CAN1_Init+0xdc>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
  CAN1_sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	@ (80007fc <MX_CAN1_Init+0xdc>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	61da      	str	r2, [r3, #28]
  CAN1_sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80007d6:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <MX_CAN1_Init+0xdc>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  CAN1_sFilterConfig.SlaveStartFilterBank = 14;
 80007dc:	4b07      	ldr	r3, [pc, #28]	@ (80007fc <MX_CAN1_Init+0xdc>)
 80007de:	220e      	movs	r2, #14
 80007e0:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_CAN_ConfigFilter(&hcan1, &CAN1_sFilterConfig);
 80007e2:	4906      	ldr	r1, [pc, #24]	@ (80007fc <MX_CAN1_Init+0xdc>)
 80007e4:	4802      	ldr	r0, [pc, #8]	@ (80007f0 <MX_CAN1_Init+0xd0>)
 80007e6:	f000 ff1f 	bl	8001628 <HAL_CAN_ConfigFilter>


  /* USER CODE END CAN1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000098 	.word	0x20000098
 80007f4:	40006400 	.word	0x40006400
 80007f8:	20000130 	.word	0x20000130
 80007fc:	20000164 	.word	0x20000164

08000800 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 8000804:	4b32      	ldr	r3, [pc, #200]	@ (80008d0 <MX_CAN2_Init+0xd0>)
 8000806:	4a33      	ldr	r2, [pc, #204]	@ (80008d4 <MX_CAN2_Init+0xd4>)
 8000808:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 21;
 800080a:	4b31      	ldr	r3, [pc, #196]	@ (80008d0 <MX_CAN2_Init+0xd0>)
 800080c:	2215      	movs	r2, #21
 800080e:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000810:	4b2f      	ldr	r3, [pc, #188]	@ (80008d0 <MX_CAN2_Init+0xd0>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000816:	4b2e      	ldr	r3, [pc, #184]	@ (80008d0 <MX_CAN2_Init+0xd0>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_12TQ;
 800081c:	4b2c      	ldr	r3, [pc, #176]	@ (80008d0 <MX_CAN2_Init+0xd0>)
 800081e:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8000822:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000824:	4b2a      	ldr	r3, [pc, #168]	@ (80008d0 <MX_CAN2_Init+0xd0>)
 8000826:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800082a:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 800082c:	4b28      	ldr	r3, [pc, #160]	@ (80008d0 <MX_CAN2_Init+0xd0>)
 800082e:	2200      	movs	r2, #0
 8000830:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 8000832:	4b27      	ldr	r3, [pc, #156]	@ (80008d0 <MX_CAN2_Init+0xd0>)
 8000834:	2200      	movs	r2, #0
 8000836:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8000838:	4b25      	ldr	r3, [pc, #148]	@ (80008d0 <MX_CAN2_Init+0xd0>)
 800083a:	2200      	movs	r2, #0
 800083c:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 800083e:	4b24      	ldr	r3, [pc, #144]	@ (80008d0 <MX_CAN2_Init+0xd0>)
 8000840:	2200      	movs	r2, #0
 8000842:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000844:	4b22      	ldr	r3, [pc, #136]	@ (80008d0 <MX_CAN2_Init+0xd0>)
 8000846:	2200      	movs	r2, #0
 8000848:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 800084a:	4b21      	ldr	r3, [pc, #132]	@ (80008d0 <MX_CAN2_Init+0xd0>)
 800084c:	2200      	movs	r2, #0
 800084e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000850:	481f      	ldr	r0, [pc, #124]	@ (80008d0 <MX_CAN2_Init+0xd0>)
 8000852:	f000 fded 	bl	8001430 <HAL_CAN_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 800085c:	f000 fb4a 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
     //Config header CAN2
     CAN2_pHeader.DLC = 8;
 8000860:	4b1d      	ldr	r3, [pc, #116]	@ (80008d8 <MX_CAN2_Init+0xd8>)
 8000862:	2208      	movs	r2, #8
 8000864:	611a      	str	r2, [r3, #16]
     CAN2_pHeader.ExtId = 0;
 8000866:	4b1c      	ldr	r3, [pc, #112]	@ (80008d8 <MX_CAN2_Init+0xd8>)
 8000868:	2200      	movs	r2, #0
 800086a:	605a      	str	r2, [r3, #4]
     CAN2_pHeader.RTR = CAN_RTR_DATA;
 800086c:	4b1a      	ldr	r3, [pc, #104]	@ (80008d8 <MX_CAN2_Init+0xd8>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
     CAN2_pHeader.IDE = CAN_ID_STD;
 8000872:	4b19      	ldr	r3, [pc, #100]	@ (80008d8 <MX_CAN2_Init+0xd8>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
     CAN2_pHeader.StdId = 0x0A2;
 8000878:	4b17      	ldr	r3, [pc, #92]	@ (80008d8 <MX_CAN2_Init+0xd8>)
 800087a:	22a2      	movs	r2, #162	@ 0xa2
 800087c:	601a      	str	r2, [r3, #0]
     CAN2_pHeader.TransmitGlobalTime = ENABLE;
 800087e:	4b16      	ldr	r3, [pc, #88]	@ (80008d8 <MX_CAN2_Init+0xd8>)
 8000880:	2201      	movs	r2, #1
 8000882:	751a      	strb	r2, [r3, #20]

     //Config filter CAN2
     CAN2_sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000884:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <MX_CAN2_Init+0xdc>)
 8000886:	2201      	movs	r2, #1
 8000888:	621a      	str	r2, [r3, #32]
     CAN2_sFilterConfig.FilterBank = 14;
 800088a:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <MX_CAN2_Init+0xdc>)
 800088c:	220e      	movs	r2, #14
 800088e:	615a      	str	r2, [r3, #20]
     CAN2_sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000890:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <MX_CAN2_Init+0xdc>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
     CAN2_sFilterConfig.FilterIdHigh = 0x0A2 << 5;
 8000896:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_CAN2_Init+0xdc>)
 8000898:	f44f 52a2 	mov.w	r2, #5184	@ 0x1440
 800089c:	601a      	str	r2, [r3, #0]
     CAN2_sFilterConfig.FilterIdLow = 0x0000;
 800089e:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <MX_CAN2_Init+0xdc>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	605a      	str	r2, [r3, #4]
     CAN2_sFilterConfig.FilterMaskIdHigh = 0;//0x012 << 5;
 80008a4:	4b0d      	ldr	r3, [pc, #52]	@ (80008dc <MX_CAN2_Init+0xdc>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
     CAN2_sFilterConfig.FilterMaskIdLow = 0x0000;
 80008aa:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <MX_CAN2_Init+0xdc>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
     CAN2_sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80008b0:	4b0a      	ldr	r3, [pc, #40]	@ (80008dc <MX_CAN2_Init+0xdc>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	61da      	str	r2, [r3, #28]
     CAN2_sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_CAN2_Init+0xdc>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
     CAN2_sFilterConfig.SlaveStartFilterBank = 14;
 80008bc:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <MX_CAN2_Init+0xdc>)
 80008be:	220e      	movs	r2, #14
 80008c0:	625a      	str	r2, [r3, #36]	@ 0x24
     HAL_CAN_ConfigFilter(&hcan2, &CAN2_sFilterConfig);
 80008c2:	4906      	ldr	r1, [pc, #24]	@ (80008dc <MX_CAN2_Init+0xdc>)
 80008c4:	4802      	ldr	r0, [pc, #8]	@ (80008d0 <MX_CAN2_Init+0xd0>)
 80008c6:	f000 feaf 	bl	8001628 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN2_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000c0 	.word	0x200000c0
 80008d4:	40006800 	.word	0x40006800
 80008d8:	2000018c 	.word	0x2000018c
 80008dc:	200001c0 	.word	0x200001c0

080008e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008e4:	4b11      	ldr	r3, [pc, #68]	@ (800092c <MX_USART3_UART_Init+0x4c>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	@ (8000930 <MX_USART3_UART_Init+0x50>)
 80008e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ea:	4b10      	ldr	r3, [pc, #64]	@ (800092c <MX_USART3_UART_Init+0x4c>)
 80008ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <MX_USART3_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <MX_USART3_UART_Init+0x4c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <MX_USART3_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000904:	4b09      	ldr	r3, [pc, #36]	@ (800092c <MX_USART3_UART_Init+0x4c>)
 8000906:	220c      	movs	r2, #12
 8000908:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b08      	ldr	r3, [pc, #32]	@ (800092c <MX_USART3_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000910:	4b06      	ldr	r3, [pc, #24]	@ (800092c <MX_USART3_UART_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	@ (800092c <MX_USART3_UART_Init+0x4c>)
 8000918:	f002 fc10 	bl	800313c <HAL_UART_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000922:	f000 fae7 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200000e8 	.word	0x200000e8
 8000930:	40004800 	.word	0x40004800

08000934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	@ 0x28
 8000938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	4b34      	ldr	r3, [pc, #208]	@ (8000a20 <MX_GPIO_Init+0xec>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a33      	ldr	r2, [pc, #204]	@ (8000a20 <MX_GPIO_Init+0xec>)
 8000954:	f043 0304 	orr.w	r3, r3, #4
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b31      	ldr	r3, [pc, #196]	@ (8000a20 <MX_GPIO_Init+0xec>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0304 	and.w	r3, r3, #4
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a20 <MX_GPIO_Init+0xec>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a2c      	ldr	r2, [pc, #176]	@ (8000a20 <MX_GPIO_Init+0xec>)
 8000970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b2a      	ldr	r3, [pc, #168]	@ (8000a20 <MX_GPIO_Init+0xec>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	4b26      	ldr	r3, [pc, #152]	@ (8000a20 <MX_GPIO_Init+0xec>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a25      	ldr	r2, [pc, #148]	@ (8000a20 <MX_GPIO_Init+0xec>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b23      	ldr	r3, [pc, #140]	@ (8000a20 <MX_GPIO_Init+0xec>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a20 <MX_GPIO_Init+0xec>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000a20 <MX_GPIO_Init+0xec>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000a20 <MX_GPIO_Init+0xec>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC13 PC4 PC5 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80009ba:	f242 03f0 	movw	r3, #8432	@ 0x20f0
 80009be:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	4815      	ldr	r0, [pc, #84]	@ (8000a24 <MX_GPIO_Init+0xf0>)
 80009d0:	f001 fd44 	bl	800245c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009d4:	2301      	movs	r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009d8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009de:	2301      	movs	r3, #1
 80009e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	480f      	ldr	r0, [pc, #60]	@ (8000a28 <MX_GPIO_Init+0xf4>)
 80009ea:	f001 fd37 	bl	800245c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009ee:	2302      	movs	r3, #2
 80009f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	4809      	ldr	r0, [pc, #36]	@ (8000a28 <MX_GPIO_Init+0xf4>)
 8000a02:	f001 fd2b 	bl	800245c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2101      	movs	r1, #1
 8000a0a:	2006      	movs	r0, #6
 8000a0c:	f001 fc5d 	bl	80022ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a10:	2006      	movs	r0, #6
 8000a12:	f001 fc76 	bl	8002302 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a16:	bf00      	nop
 8000a18:	3728      	adds	r7, #40	@ 0x28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020800 	.word	0x40020800
 8000a28:	40020000 	.word	0x40020000

08000a2c <MX_CAN1_Setup>:

/* USER CODE BEGIN 4 */

void MX_CAN1_Setup()
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	HAL_CAN_ConfigFilter(&hcan1, &CAN1_sFilterConfig);
 8000a30:	4906      	ldr	r1, [pc, #24]	@ (8000a4c <MX_CAN1_Setup+0x20>)
 8000a32:	4807      	ldr	r0, [pc, #28]	@ (8000a50 <MX_CAN1_Setup+0x24>)
 8000a34:	f000 fdf8 	bl	8001628 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 8000a38:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <MX_CAN1_Setup+0x24>)
 8000a3a:	f000 fed5 	bl	80017e8 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000a3e:	2102      	movs	r1, #2
 8000a40:	4803      	ldr	r0, [pc, #12]	@ (8000a50 <MX_CAN1_Setup+0x24>)
 8000a42:	f001 f907 	bl	8001c54 <HAL_CAN_ActivateNotification>

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000164 	.word	0x20000164
 8000a50:	20000098 	.word	0x20000098

08000a54 <MX_CAN2_Setup>:
void MX_CAN2_Setup()
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	HAL_CAN_ConfigFilter(&hcan2, &CAN2_sFilterConfig);
 8000a58:	4906      	ldr	r1, [pc, #24]	@ (8000a74 <MX_CAN2_Setup+0x20>)
 8000a5a:	4807      	ldr	r0, [pc, #28]	@ (8000a78 <MX_CAN2_Setup+0x24>)
 8000a5c:	f000 fde4 	bl	8001628 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan2);
 8000a60:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <MX_CAN2_Setup+0x24>)
 8000a62:	f000 fec1 	bl	80017e8 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000a66:	2102      	movs	r1, #2
 8000a68:	4803      	ldr	r0, [pc, #12]	@ (8000a78 <MX_CAN2_Setup+0x24>)
 8000a6a:	f001 f8f3 	bl	8001c54 <HAL_CAN_ActivateNotification>

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200001c0 	.word	0x200001c0
 8000a78:	200000c0 	.word	0x200000c0

08000a7c <USART3_SendString>:

void USART3_SendString(uint8_t *ch)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
   while(*ch!=0)
 8000a84:	e009      	b.n	8000a9a <USART3_SendString+0x1e>
   {
      HAL_UART_Transmit(&huart3, ch, 1,HAL_MAX_DELAY);
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	6879      	ldr	r1, [r7, #4]
 8000a8e:	4807      	ldr	r0, [pc, #28]	@ (8000aac <USART3_SendString+0x30>)
 8000a90:	f002 fba4 	bl	80031dc <HAL_UART_Transmit>
      ch++;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3301      	adds	r3, #1
 8000a98:	607b      	str	r3, [r7, #4]
   while(*ch!=0)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d1f1      	bne.n	8000a86 <USART3_SendString+0xa>
   }
}
 8000aa2:	bf00      	nop
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200000e8 	.word	0x200000e8

08000ab0 <PrintCANLog>:
void PrintCANLog(uint16_t CANID, uint8_t * CAN_Frame)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	6039      	str	r1, [r7, #0]
 8000aba:	80fb      	strh	r3, [r7, #6]
	uint16_t loopIndx = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	83fb      	strh	r3, [r7, #30]
	char bufID[3] = "   ";
 8000ac0:	4a3b      	ldr	r2, [pc, #236]	@ (8000bb0 <PrintCANLog+0x100>)
 8000ac2:	f107 0318 	add.w	r3, r7, #24
 8000ac6:	6812      	ldr	r2, [r2, #0]
 8000ac8:	4611      	mov	r1, r2
 8000aca:	8019      	strh	r1, [r3, #0]
 8000acc:	3302      	adds	r3, #2
 8000ace:	0c12      	lsrs	r2, r2, #16
 8000ad0:	701a      	strb	r2, [r3, #0]
	char bufDat[2] = "  ";
 8000ad2:	f242 0320 	movw	r3, #8224	@ 0x2020
 8000ad6:	82bb      	strh	r3, [r7, #20]
	char bufTime [8]="        ";
 8000ad8:	4a36      	ldr	r2, [pc, #216]	@ (8000bb4 <PrintCANLog+0x104>)
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ae2:	e883 0003 	stmia.w	r3, {r0, r1}

	sprintf(bufTime,"%d",TimeStamp);
 8000ae6:	4b34      	ldr	r3, [pc, #208]	@ (8000bb8 <PrintCANLog+0x108>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	f107 030c 	add.w	r3, r7, #12
 8000aee:	4933      	ldr	r1, [pc, #204]	@ (8000bbc <PrintCANLog+0x10c>)
 8000af0:	4618      	mov	r0, r3
 8000af2:	f003 fb79 	bl	80041e8 <siprintf>
	USART3_SendString((uint8_t*)bufTime);
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff ffbe 	bl	8000a7c <USART3_SendString>
	USART3_SendString((uint8_t*)" ");
 8000b00:	482f      	ldr	r0, [pc, #188]	@ (8000bc0 <PrintCANLog+0x110>)
 8000b02:	f7ff ffbb 	bl	8000a7c <USART3_SendString>

	sprintf(bufID,"%03X",CANID);
 8000b06:	88fa      	ldrh	r2, [r7, #6]
 8000b08:	f107 0318 	add.w	r3, r7, #24
 8000b0c:	492d      	ldr	r1, [pc, #180]	@ (8000bc4 <PrintCANLog+0x114>)
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f003 fb6a 	bl	80041e8 <siprintf>
	for(loopIndx = 0; loopIndx < 3; loopIndx ++)
 8000b14:	2300      	movs	r3, #0
 8000b16:	83fb      	strh	r3, [r7, #30]
 8000b18:	e00a      	b.n	8000b30 <PrintCANLog+0x80>
	{
		bufsend[loopIndx]  = bufID[loopIndx];
 8000b1a:	8bfa      	ldrh	r2, [r7, #30]
 8000b1c:	8bfb      	ldrh	r3, [r7, #30]
 8000b1e:	3220      	adds	r2, #32
 8000b20:	443a      	add	r2, r7
 8000b22:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 8000b26:	4a28      	ldr	r2, [pc, #160]	@ (8000bc8 <PrintCANLog+0x118>)
 8000b28:	54d1      	strb	r1, [r2, r3]
	for(loopIndx = 0; loopIndx < 3; loopIndx ++)
 8000b2a:	8bfb      	ldrh	r3, [r7, #30]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	83fb      	strh	r3, [r7, #30]
 8000b30:	8bfb      	ldrh	r3, [r7, #30]
 8000b32:	2b02      	cmp	r3, #2
 8000b34:	d9f1      	bls.n	8000b1a <PrintCANLog+0x6a>
	}
	bufsend[3] = ':';
 8000b36:	4b24      	ldr	r3, [pc, #144]	@ (8000bc8 <PrintCANLog+0x118>)
 8000b38:	223a      	movs	r2, #58	@ 0x3a
 8000b3a:	70da      	strb	r2, [r3, #3]
	bufsend[4] = ' ';
 8000b3c:	4b22      	ldr	r3, [pc, #136]	@ (8000bc8 <PrintCANLog+0x118>)
 8000b3e:	2220      	movs	r2, #32
 8000b40:	711a      	strb	r2, [r3, #4]


	for(loopIndx = 0; loopIndx < 8; loopIndx ++ )
 8000b42:	2300      	movs	r3, #0
 8000b44:	83fb      	strh	r3, [r7, #30]
 8000b46:	e025      	b.n	8000b94 <PrintCANLog+0xe4>
	{
		sprintf(bufDat,"%02X",CAN_Frame[loopIndx]);
 8000b48:	8bfb      	ldrh	r3, [r7, #30]
 8000b4a:	683a      	ldr	r2, [r7, #0]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	491d      	ldr	r1, [pc, #116]	@ (8000bcc <PrintCANLog+0x11c>)
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f003 fb45 	bl	80041e8 <siprintf>
		bufsend[loopIndx*3 + 5] = bufDat[0];
 8000b5e:	8bfa      	ldrh	r2, [r7, #30]
 8000b60:	4613      	mov	r3, r2
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	4413      	add	r3, r2
 8000b66:	3305      	adds	r3, #5
 8000b68:	7d39      	ldrb	r1, [r7, #20]
 8000b6a:	4a17      	ldr	r2, [pc, #92]	@ (8000bc8 <PrintCANLog+0x118>)
 8000b6c:	54d1      	strb	r1, [r2, r3]
		bufsend[loopIndx*3 + 6] = bufDat[1];
 8000b6e:	8bfa      	ldrh	r2, [r7, #30]
 8000b70:	4613      	mov	r3, r2
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	4413      	add	r3, r2
 8000b76:	3306      	adds	r3, #6
 8000b78:	7d79      	ldrb	r1, [r7, #21]
 8000b7a:	4a13      	ldr	r2, [pc, #76]	@ (8000bc8 <PrintCANLog+0x118>)
 8000b7c:	54d1      	strb	r1, [r2, r3]
		bufsend[loopIndx*3 + 7] = ' ';
 8000b7e:	8bfa      	ldrh	r2, [r7, #30]
 8000b80:	4613      	mov	r3, r2
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	4413      	add	r3, r2
 8000b86:	3307      	adds	r3, #7
 8000b88:	4a0f      	ldr	r2, [pc, #60]	@ (8000bc8 <PrintCANLog+0x118>)
 8000b8a:	2120      	movs	r1, #32
 8000b8c:	54d1      	strb	r1, [r2, r3]
	for(loopIndx = 0; loopIndx < 8; loopIndx ++ )
 8000b8e:	8bfb      	ldrh	r3, [r7, #30]
 8000b90:	3301      	adds	r3, #1
 8000b92:	83fb      	strh	r3, [r7, #30]
 8000b94:	8bfb      	ldrh	r3, [r7, #30]
 8000b96:	2b07      	cmp	r3, #7
 8000b98:	d9d6      	bls.n	8000b48 <PrintCANLog+0x98>
	}
	bufsend[29] = '\n';
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <PrintCANLog+0x118>)
 8000b9c:	220a      	movs	r2, #10
 8000b9e:	775a      	strb	r2, [r3, #29]
	USART3_SendString((unsigned char*)bufsend);
 8000ba0:	4809      	ldr	r0, [pc, #36]	@ (8000bc8 <PrintCANLog+0x118>)
 8000ba2:	f7ff ff6b 	bl	8000a7c <USART3_SendString>
}
 8000ba6:	bf00      	nop
 8000ba8:	3720      	adds	r7, #32
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	08004b80 	.word	0x08004b80
 8000bb4:	08004b84 	.word	0x08004b84
 8000bb8:	2000121c 	.word	0x2000121c
 8000bbc:	08004b68 	.word	0x08004b68
 8000bc0:	08004b6c 	.word	0x08004b6c
 8000bc4:	08004b70 	.word	0x08004b70
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	08004b78 	.word	0x08004b78

08000bd0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	REQ_BUFFER[NumBytesReq] = REQ_1BYTE_DATA;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <HAL_UART_RxCpltCallback+0x30>)
 8000bda:	881b      	ldrh	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b09      	ldr	r3, [pc, #36]	@ (8000c04 <HAL_UART_RxCpltCallback+0x34>)
 8000be0:	7819      	ldrb	r1, [r3, #0]
 8000be2:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <HAL_UART_RxCpltCallback+0x38>)
 8000be4:	5499      	strb	r1, [r3, r2]
	NumBytesReq++;
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <HAL_UART_RxCpltCallback+0x30>)
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	3301      	adds	r3, #1
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	4b04      	ldr	r3, [pc, #16]	@ (8000c00 <HAL_UART_RxCpltCallback+0x30>)
 8000bf0:	801a      	strh	r2, [r3, #0]
	//REQ_BUFFER[7] = NumBytesReq;
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	200001f0 	.word	0x200001f0
 8000c04:	200011f4 	.word	0x200011f4
 8000c08:	200001f4 	.word	0x200001f4

08000c0c <delay>:
void delay(uint16_t delay)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(delay);
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 fbe5 	bl	80013e8 <HAL_Delay>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <crc8>:

uint8_t crc8(uint8_t *data, uint8_t len) {
 8000c26:	b480      	push	{r7}
 8000c28:	b085      	sub	sp, #20
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
 8000c2e:	460b      	mov	r3, r1
 8000c30:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0xFF; //  First value of CRC-8 SAE J1850
 8000c32:	23ff      	movs	r3, #255	@ 0xff
 8000c34:	73fb      	strb	r3, [r7, #15]

    for (uint8_t i = 0; i < len; i++) {
 8000c36:	2300      	movs	r3, #0
 8000c38:	73bb      	strb	r3, [r7, #14]
 8000c3a:	e021      	b.n	8000c80 <crc8+0x5a>
        crc ^= data[i];
 8000c3c:	7bbb      	ldrb	r3, [r7, #14]
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	781a      	ldrb	r2, [r3, #0]
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	4053      	eors	r3, r2
 8000c48:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	737b      	strb	r3, [r7, #13]
 8000c4e:	e011      	b.n	8000c74 <crc8+0x4e>
            if (crc & 0x80) {
 8000c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	da07      	bge.n	8000c68 <crc8+0x42>
                crc = (crc << 1) ^ 0x1D;
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	b25b      	sxtb	r3, r3
 8000c5e:	f083 031d 	eor.w	r3, r3, #29
 8000c62:	b25b      	sxtb	r3, r3
 8000c64:	73fb      	strb	r3, [r7, #15]
 8000c66:	e002      	b.n	8000c6e <crc8+0x48>
            } else {
                crc <<= 1;
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {
 8000c6e:	7b7b      	ldrb	r3, [r7, #13]
 8000c70:	3301      	adds	r3, #1
 8000c72:	737b      	strb	r3, [r7, #13]
 8000c74:	7b7b      	ldrb	r3, [r7, #13]
 8000c76:	2b07      	cmp	r3, #7
 8000c78:	d9ea      	bls.n	8000c50 <crc8+0x2a>
    for (uint8_t i = 0; i < len; i++) {
 8000c7a:	7bbb      	ldrb	r3, [r7, #14]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	73bb      	strb	r3, [r7, #14]
 8000c80:	7bba      	ldrb	r2, [r7, #14]
 8000c82:	78fb      	ldrb	r3, [r7, #3]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d3d9      	bcc.n	8000c3c <crc8+0x16>
            }
        }
    }
    return crc;
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <CAN1_Send_Message>:

void CAN1_Send_Message() {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
    CAN1_DATA_TX[0] = 0x00;  // byte 0
 8000c9c:	4b13      	ldr	r3, [pc, #76]	@ (8000cec <CAN1_Send_Message+0x54>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
    CAN1_DATA_TX[1] = 0x12;  // byte 1
 8000ca2:	4b12      	ldr	r3, [pc, #72]	@ (8000cec <CAN1_Send_Message+0x54>)
 8000ca4:	2212      	movs	r2, #18
 8000ca6:	705a      	strb	r2, [r3, #1]
    CAN1_DATA_TX[6] = MsgCounter & 0x0F;  // Message counter
 8000ca8:	4b11      	ldr	r3, [pc, #68]	@ (8000cf0 <CAN1_Send_Message+0x58>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	f003 030f 	and.w	r3, r3, #15
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <CAN1_Send_Message+0x54>)
 8000cb4:	719a      	strb	r2, [r3, #6]

    CAN1_DATA_TX[7] = crc8(CAN1_DATA_TX, 7); // check sum
 8000cb6:	2107      	movs	r1, #7
 8000cb8:	480c      	ldr	r0, [pc, #48]	@ (8000cec <CAN1_Send_Message+0x54>)
 8000cba:	f7ff ffb4 	bl	8000c26 <crc8>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cec <CAN1_Send_Message+0x54>)
 8000cc4:	71da      	strb	r2, [r3, #7]

    USART3_SendString((uint8_t *)"CAN1 TX: ");
 8000cc6:	480b      	ldr	r0, [pc, #44]	@ (8000cf4 <CAN1_Send_Message+0x5c>)
 8000cc8:	f7ff fed8 	bl	8000a7c <USART3_SendString>
    PrintCANLog(CAN1_pHeader.StdId, CAN1_DATA_TX);
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf8 <CAN1_Send_Message+0x60>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	4906      	ldr	r1, [pc, #24]	@ (8000cec <CAN1_Send_Message+0x54>)
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff feeb 	bl	8000ab0 <PrintCANLog>

    HAL_CAN_AddTxMessage(&hcan1, &CAN1_pHeader, CAN1_DATA_TX, &CAN1_pTxMailbox);
 8000cda:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <CAN1_Send_Message+0x64>)
 8000cdc:	4a03      	ldr	r2, [pc, #12]	@ (8000cec <CAN1_Send_Message+0x54>)
 8000cde:	4906      	ldr	r1, [pc, #24]	@ (8000cf8 <CAN1_Send_Message+0x60>)
 8000ce0:	4807      	ldr	r0, [pc, #28]	@ (8000d00 <CAN1_Send_Message+0x68>)
 8000ce2:	f000 fdc5 	bl	8001870 <HAL_CAN_AddTxMessage>

//    MsgCounter++;
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200011f8 	.word	0x200011f8
 8000cf0:	20001218 	.word	0x20001218
 8000cf4:	08004b48 	.word	0x08004b48
 8000cf8:	20000130 	.word	0x20000130
 8000cfc:	200001e8 	.word	0x200001e8
 8000d00:	20000098 	.word	0x20000098

08000d04 <CAN2_Send_Message>:

void CAN2_Send_Message() {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
    CAN2_DATA_TX[0] = 0x00;  //byte 0
 8000d08:	4b1a      	ldr	r3, [pc, #104]	@ (8000d74 <CAN2_Send_Message+0x70>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
    CAN2_DATA_TX[1] = 0xA2;  //byte 1
 8000d0e:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <CAN2_Send_Message+0x70>)
 8000d10:	22a2      	movs	r2, #162	@ 0xa2
 8000d12:	705a      	strb	r2, [r3, #1]
    CAN2_DATA_TX[2] = CAN2_DATA_TX[0] + CAN2_DATA_TX[1]; //byte2 = byte1 + byte0
 8000d14:	4b17      	ldr	r3, [pc, #92]	@ (8000d74 <CAN2_Send_Message+0x70>)
 8000d16:	781a      	ldrb	r2, [r3, #0]
 8000d18:	4b16      	ldr	r3, [pc, #88]	@ (8000d74 <CAN2_Send_Message+0x70>)
 8000d1a:	785b      	ldrb	r3, [r3, #1]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	4b14      	ldr	r3, [pc, #80]	@ (8000d74 <CAN2_Send_Message+0x70>)
 8000d22:	709a      	strb	r2, [r3, #2]
    CAN2_DATA_TX[6] = MsgCounter & 0x0F;  //Message counter
 8000d24:	4b14      	ldr	r3, [pc, #80]	@ (8000d78 <CAN2_Send_Message+0x74>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	f003 030f 	and.w	r3, r3, #15
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <CAN2_Send_Message+0x70>)
 8000d30:	719a      	strb	r2, [r3, #6]

    CAN2_DATA_TX[7] = crc8(CAN2_DATA_TX, 7); // check sum
 8000d32:	2107      	movs	r1, #7
 8000d34:	480f      	ldr	r0, [pc, #60]	@ (8000d74 <CAN2_Send_Message+0x70>)
 8000d36:	f7ff ff76 	bl	8000c26 <crc8>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d74 <CAN2_Send_Message+0x70>)
 8000d40:	71da      	strb	r2, [r3, #7]

    USART3_SendString((uint8_t *)"CAN2 TX: ");
 8000d42:	480e      	ldr	r0, [pc, #56]	@ (8000d7c <CAN2_Send_Message+0x78>)
 8000d44:	f7ff fe9a 	bl	8000a7c <USART3_SendString>
    PrintCANLog(CAN2_pHeader.StdId, CAN2_DATA_TX);
 8000d48:	4b0d      	ldr	r3, [pc, #52]	@ (8000d80 <CAN2_Send_Message+0x7c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	4909      	ldr	r1, [pc, #36]	@ (8000d74 <CAN2_Send_Message+0x70>)
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fead 	bl	8000ab0 <PrintCANLog>

    HAL_CAN_AddTxMessage(&hcan2, &CAN2_pHeader, CAN2_DATA_TX, &CAN2_pTxMailbox);
 8000d56:	4b0b      	ldr	r3, [pc, #44]	@ (8000d84 <CAN2_Send_Message+0x80>)
 8000d58:	4a06      	ldr	r2, [pc, #24]	@ (8000d74 <CAN2_Send_Message+0x70>)
 8000d5a:	4909      	ldr	r1, [pc, #36]	@ (8000d80 <CAN2_Send_Message+0x7c>)
 8000d5c:	480a      	ldr	r0, [pc, #40]	@ (8000d88 <CAN2_Send_Message+0x84>)
 8000d5e:	f000 fd87 	bl	8001870 <HAL_CAN_AddTxMessage>

    MsgCounter++;
 8000d62:	4b05      	ldr	r3, [pc, #20]	@ (8000d78 <CAN2_Send_Message+0x74>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	3301      	adds	r3, #1
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4b03      	ldr	r3, [pc, #12]	@ (8000d78 <CAN2_Send_Message+0x74>)
 8000d6c:	701a      	strb	r2, [r3, #0]
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20001208 	.word	0x20001208
 8000d78:	20001218 	.word	0x20001218
 8000d7c:	08004b8c 	.word	0x08004b8c
 8000d80:	2000018c 	.word	0x2000018c
 8000d84:	200001ec 	.word	0x200001ec
 8000d88:	200000c0 	.word	0x200000c0

08000d8c <HAL_CAN_RxFifo0MsgPendingCallBack>:

static uint32_t message_0x12_received = 0;

void HAL_CAN_RxFifo0MsgPendingCallBack(CAN_HandleTypeDef *hcan){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

	if (hcan == &hcan2){
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a1b      	ldr	r2, [pc, #108]	@ (8000e04 <HAL_CAN_RxFifo0MsgPendingCallBack+0x78>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d116      	bne.n	8000dca <HAL_CAN_RxFifo0MsgPendingCallBack+0x3e>
		if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CAN2_pHeaderRx, CAN2_DATA_RX) != HAL_OK){
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e08 <HAL_CAN_RxFifo0MsgPendingCallBack+0x7c>)
 8000d9e:	4a1b      	ldr	r2, [pc, #108]	@ (8000e0c <HAL_CAN_RxFifo0MsgPendingCallBack+0x80>)
 8000da0:	2100      	movs	r1, #0
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f000 fe34 	bl	8001a10 <HAL_CAN_GetRxMessage>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d002      	beq.n	8000db4 <HAL_CAN_RxFifo0MsgPendingCallBack+0x28>
			message_0x12_received = 1;
 8000dae:	4b18      	ldr	r3, [pc, #96]	@ (8000e10 <HAL_CAN_RxFifo0MsgPendingCallBack+0x84>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	601a      	str	r2, [r3, #0]
		}
		USART3_SendString((uint8_t *)"CAN2 RX: ");
 8000db4:	4817      	ldr	r0, [pc, #92]	@ (8000e14 <HAL_CAN_RxFifo0MsgPendingCallBack+0x88>)
 8000db6:	f7ff fe61 	bl	8000a7c <USART3_SendString>
		PrintCANLog(CAN1_pHeader.StdId, CAN2_DATA_RX);
 8000dba:	4b17      	ldr	r3, [pc, #92]	@ (8000e18 <HAL_CAN_RxFifo0MsgPendingCallBack+0x8c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	4911      	ldr	r1, [pc, #68]	@ (8000e08 <HAL_CAN_RxFifo0MsgPendingCallBack+0x7c>)
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fe74 	bl	8000ab0 <PrintCANLog>
			Error_Handler();
		}
		USART3_SendString((uint8_t *)"CAN1 RX: ");
		PrintCANLog(CAN2_pHeader.StdId, CAN1_DATA_RX);
	}
}
 8000dc8:	e018      	b.n	8000dfc <HAL_CAN_RxFifo0MsgPendingCallBack+0x70>
	else if(hcan == &hcan1){
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a13      	ldr	r2, [pc, #76]	@ (8000e1c <HAL_CAN_RxFifo0MsgPendingCallBack+0x90>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d114      	bne.n	8000dfc <HAL_CAN_RxFifo0MsgPendingCallBack+0x70>
		if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CAN1_pHeaderRx, CAN1_DATA_RX) != HAL_OK){
 8000dd2:	4b13      	ldr	r3, [pc, #76]	@ (8000e20 <HAL_CAN_RxFifo0MsgPendingCallBack+0x94>)
 8000dd4:	4a13      	ldr	r2, [pc, #76]	@ (8000e24 <HAL_CAN_RxFifo0MsgPendingCallBack+0x98>)
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f000 fe19 	bl	8001a10 <HAL_CAN_GetRxMessage>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <HAL_CAN_RxFifo0MsgPendingCallBack+0x5c>
			Error_Handler();
 8000de4:	f000 f886 	bl	8000ef4 <Error_Handler>
		USART3_SendString((uint8_t *)"CAN1 RX: ");
 8000de8:	480f      	ldr	r0, [pc, #60]	@ (8000e28 <HAL_CAN_RxFifo0MsgPendingCallBack+0x9c>)
 8000dea:	f7ff fe47 	bl	8000a7c <USART3_SendString>
		PrintCANLog(CAN2_pHeader.StdId, CAN1_DATA_RX);
 8000dee:	4b0f      	ldr	r3, [pc, #60]	@ (8000e2c <HAL_CAN_RxFifo0MsgPendingCallBack+0xa0>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	490a      	ldr	r1, [pc, #40]	@ (8000e20 <HAL_CAN_RxFifo0MsgPendingCallBack+0x94>)
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fe5a 	bl	8000ab0 <PrintCANLog>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	200000c0 	.word	0x200000c0
 8000e08:	20001210 	.word	0x20001210
 8000e0c:	200001a4 	.word	0x200001a4
 8000e10:	20001220 	.word	0x20001220
 8000e14:	08004b98 	.word	0x08004b98
 8000e18:	20000130 	.word	0x20000130
 8000e1c:	20000098 	.word	0x20000098
 8000e20:	20001200 	.word	0x20001200
 8000e24:	20000148 	.word	0x20000148
 8000e28:	08004ba4 	.word	0x08004ba4
 8000e2c:	2000018c 	.word	0x2000018c

08000e30 <CheckForMissingMessage>:
void CheckForMissingMessage() {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
    static uint32_t last_check_time = 0;
    uint32_t current_time = HAL_GetTick();
 8000e36:	f000 facb 	bl	80013d0 <HAL_GetTick>
 8000e3a:	6078      	str	r0, [r7, #4]

    if (current_time - last_check_time > 1000) { // Check every 1 second
 8000e3c:	4b24      	ldr	r3, [pc, #144]	@ (8000ed0 <CheckForMissingMessage+0xa0>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e48:	d93d      	bls.n	8000ec6 <CheckForMissingMessage+0x96>
        if (!message_0x12_received) {
 8000e4a:	4b22      	ldr	r3, [pc, #136]	@ (8000ed4 <CheckForMissingMessage+0xa4>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d133      	bne.n	8000eba <CheckForMissingMessage+0x8a>
            // Message 0x12 was not received, send message 0xA2
        	CAN2_DATA_TX[0] = 0x00;
 8000e52:	4b21      	ldr	r3, [pc, #132]	@ (8000ed8 <CheckForMissingMessage+0xa8>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
        	            CAN2_DATA_TX[1] = 0x00;
 8000e58:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed8 <CheckForMissingMessage+0xa8>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	705a      	strb	r2, [r3, #1]
        	            CAN2_DATA_TX[2] = 0x00;
 8000e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed8 <CheckForMissingMessage+0xa8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	709a      	strb	r2, [r3, #2]
        	            CAN2_DATA_TX[3] = 0x00;
 8000e64:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed8 <CheckForMissingMessage+0xa8>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	70da      	strb	r2, [r3, #3]
        	            CAN2_DATA_TX[4] = 0x00;
 8000e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed8 <CheckForMissingMessage+0xa8>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	711a      	strb	r2, [r3, #4]
        	            CAN2_DATA_TX[5] = 0x00;
 8000e70:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <CheckForMissingMessage+0xa8>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	715a      	strb	r2, [r3, #5]
        	            CAN2_DATA_TX[6] = MsgCounter & 0x0F;
 8000e76:	4b19      	ldr	r3, [pc, #100]	@ (8000edc <CheckForMissingMessage+0xac>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <CheckForMissingMessage+0xa8>)
 8000e82:	719a      	strb	r2, [r3, #6]
        	            CAN2_DATA_TX[7] = crc8(CAN2_DATA_TX, 7);
 8000e84:	2107      	movs	r1, #7
 8000e86:	4814      	ldr	r0, [pc, #80]	@ (8000ed8 <CheckForMissingMessage+0xa8>)
 8000e88:	f7ff fecd 	bl	8000c26 <crc8>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b11      	ldr	r3, [pc, #68]	@ (8000ed8 <CheckForMissingMessage+0xa8>)
 8000e92:	71da      	strb	r2, [r3, #7]

        	USART3_SendString((uint8_t *)"\nWRONG CRC\n");
 8000e94:	4812      	ldr	r0, [pc, #72]	@ (8000ee0 <CheckForMissingMessage+0xb0>)
 8000e96:	f7ff fdf1 	bl	8000a7c <USART3_SendString>
        	USART3_SendString((uint8_t *)"CAN2 TX: ");
 8000e9a:	4812      	ldr	r0, [pc, #72]	@ (8000ee4 <CheckForMissingMessage+0xb4>)
 8000e9c:	f7ff fdee 	bl	8000a7c <USART3_SendString>
        	PrintCANLog(CAN2_pHeader.StdId, CAN2_DATA_TX);
 8000ea0:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <CheckForMissingMessage+0xb8>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	490c      	ldr	r1, [pc, #48]	@ (8000ed8 <CheckForMissingMessage+0xa8>)
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fe01 	bl	8000ab0 <PrintCANLog>
            HAL_CAN_AddTxMessage(&hcan2, &CAN2_pHeader, CAN2_DATA_TX, &CAN2_pTxMailbox);
 8000eae:	4b0f      	ldr	r3, [pc, #60]	@ (8000eec <CheckForMissingMessage+0xbc>)
 8000eb0:	4a09      	ldr	r2, [pc, #36]	@ (8000ed8 <CheckForMissingMessage+0xa8>)
 8000eb2:	490d      	ldr	r1, [pc, #52]	@ (8000ee8 <CheckForMissingMessage+0xb8>)
 8000eb4:	480e      	ldr	r0, [pc, #56]	@ (8000ef0 <CheckForMissingMessage+0xc0>)
 8000eb6:	f000 fcdb 	bl	8001870 <HAL_CAN_AddTxMessage>
        }
        message_0x12_received = 0; // Reset flag for next check
 8000eba:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <CheckForMissingMessage+0xa4>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
        last_check_time = current_time;
 8000ec0:	4a03      	ldr	r2, [pc, #12]	@ (8000ed0 <CheckForMissingMessage+0xa0>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6013      	str	r3, [r2, #0]
    }
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20001224 	.word	0x20001224
 8000ed4:	20001220 	.word	0x20001220
 8000ed8:	20001208 	.word	0x20001208
 8000edc:	20001218 	.word	0x20001218
 8000ee0:	08004bb0 	.word	0x08004bb0
 8000ee4:	08004b8c 	.word	0x08004b8c
 8000ee8:	2000018c 	.word	0x2000018c
 8000eec:	200001ec 	.word	0x200001ec
 8000ef0:	200000c0 	.word	0x200000c0

08000ef4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef8:	b672      	cpsid	i
}
 8000efa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <Error_Handler+0x8>

08000f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	4b10      	ldr	r3, [pc, #64]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f16:	4b0d      	ldr	r3, [pc, #52]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	603b      	str	r3, [r7, #0]
 8000f26:	4b09      	ldr	r3, [pc, #36]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2a:	4a08      	ldr	r2, [pc, #32]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f32:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40023800 	.word	0x40023800

08000f50 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08c      	sub	sp, #48	@ 0x30
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 031c 	add.w	r3, r7, #28
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a4a      	ldr	r2, [pc, #296]	@ (8001098 <HAL_CAN_MspInit+0x148>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d13e      	bne.n	8000ff0 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000f72:	4b4a      	ldr	r3, [pc, #296]	@ (800109c <HAL_CAN_MspInit+0x14c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	3301      	adds	r3, #1
 8000f78:	4a48      	ldr	r2, [pc, #288]	@ (800109c <HAL_CAN_MspInit+0x14c>)
 8000f7a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000f7c:	4b47      	ldr	r3, [pc, #284]	@ (800109c <HAL_CAN_MspInit+0x14c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d10d      	bne.n	8000fa0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
 8000f88:	4b45      	ldr	r3, [pc, #276]	@ (80010a0 <HAL_CAN_MspInit+0x150>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8c:	4a44      	ldr	r2, [pc, #272]	@ (80010a0 <HAL_CAN_MspInit+0x150>)
 8000f8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f94:	4b42      	ldr	r3, [pc, #264]	@ (80010a0 <HAL_CAN_MspInit+0x150>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f9c:	61bb      	str	r3, [r7, #24]
 8000f9e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	4b3e      	ldr	r3, [pc, #248]	@ (80010a0 <HAL_CAN_MspInit+0x150>)
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa8:	4a3d      	ldr	r2, [pc, #244]	@ (80010a0 <HAL_CAN_MspInit+0x150>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb0:	4b3b      	ldr	r3, [pc, #236]	@ (80010a0 <HAL_CAN_MspInit+0x150>)
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fbc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000fce:	2309      	movs	r3, #9
 8000fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4832      	ldr	r0, [pc, #200]	@ (80010a4 <HAL_CAN_MspInit+0x154>)
 8000fda:	f001 fa3f 	bl	800245c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	2014      	movs	r0, #20
 8000fe4:	f001 f971 	bl	80022ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000fe8:	2014      	movs	r0, #20
 8000fea:	f001 f98a 	bl	8002302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000fee:	e04f      	b.n	8001090 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a2c      	ldr	r2, [pc, #176]	@ (80010a8 <HAL_CAN_MspInit+0x158>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d14a      	bne.n	8001090 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	4b28      	ldr	r3, [pc, #160]	@ (80010a0 <HAL_CAN_MspInit+0x150>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001002:	4a27      	ldr	r2, [pc, #156]	@ (80010a0 <HAL_CAN_MspInit+0x150>)
 8001004:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001008:	6413      	str	r3, [r2, #64]	@ 0x40
 800100a:	4b25      	ldr	r3, [pc, #148]	@ (80010a0 <HAL_CAN_MspInit+0x150>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001016:	4b21      	ldr	r3, [pc, #132]	@ (800109c <HAL_CAN_MspInit+0x14c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	3301      	adds	r3, #1
 800101c:	4a1f      	ldr	r2, [pc, #124]	@ (800109c <HAL_CAN_MspInit+0x14c>)
 800101e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001020:	4b1e      	ldr	r3, [pc, #120]	@ (800109c <HAL_CAN_MspInit+0x14c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d10d      	bne.n	8001044 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	4b1c      	ldr	r3, [pc, #112]	@ (80010a0 <HAL_CAN_MspInit+0x150>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001030:	4a1b      	ldr	r2, [pc, #108]	@ (80010a0 <HAL_CAN_MspInit+0x150>)
 8001032:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001036:	6413      	str	r3, [r2, #64]	@ 0x40
 8001038:	4b19      	ldr	r3, [pc, #100]	@ (80010a0 <HAL_CAN_MspInit+0x150>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <HAL_CAN_MspInit+0x150>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104c:	4a14      	ldr	r2, [pc, #80]	@ (80010a0 <HAL_CAN_MspInit+0x150>)
 800104e:	f043 0302 	orr.w	r3, r3, #2
 8001052:	6313      	str	r3, [r2, #48]	@ 0x30
 8001054:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <HAL_CAN_MspInit+0x150>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001060:	2360      	movs	r3, #96	@ 0x60
 8001062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106c:	2303      	movs	r3, #3
 800106e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001070:	2309      	movs	r3, #9
 8001072:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4619      	mov	r1, r3
 800107a:	480c      	ldr	r0, [pc, #48]	@ (80010ac <HAL_CAN_MspInit+0x15c>)
 800107c:	f001 f9ee 	bl	800245c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 2, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	2102      	movs	r1, #2
 8001084:	2040      	movs	r0, #64	@ 0x40
 8001086:	f001 f920 	bl	80022ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800108a:	2040      	movs	r0, #64	@ 0x40
 800108c:	f001 f939 	bl	8002302 <HAL_NVIC_EnableIRQ>
}
 8001090:	bf00      	nop
 8001092:	3730      	adds	r7, #48	@ 0x30
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40006400 	.word	0x40006400
 800109c:	20001228 	.word	0x20001228
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020000 	.word	0x40020000
 80010a8:	40006800 	.word	0x40006800
 80010ac:	40020400 	.word	0x40020400

080010b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	@ 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001144 <HAL_UART_MspInit+0x94>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d134      	bne.n	800113c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001148 <HAL_UART_MspInit+0x98>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	4a1b      	ldr	r2, [pc, #108]	@ (8001148 <HAL_UART_MspInit+0x98>)
 80010dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e2:	4b19      	ldr	r3, [pc, #100]	@ (8001148 <HAL_UART_MspInit+0x98>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b15      	ldr	r3, [pc, #84]	@ (8001148 <HAL_UART_MspInit+0x98>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	4a14      	ldr	r2, [pc, #80]	@ (8001148 <HAL_UART_MspInit+0x98>)
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fe:	4b12      	ldr	r3, [pc, #72]	@ (8001148 <HAL_UART_MspInit+0x98>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800110a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800110e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001118:	2303      	movs	r3, #3
 800111a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800111c:	2307      	movs	r3, #7
 800111e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	4619      	mov	r1, r3
 8001126:	4809      	ldr	r0, [pc, #36]	@ (800114c <HAL_UART_MspInit+0x9c>)
 8001128:	f001 f998 	bl	800245c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 800112c:	2200      	movs	r2, #0
 800112e:	2101      	movs	r1, #1
 8001130:	2027      	movs	r0, #39	@ 0x27
 8001132:	f001 f8ca 	bl	80022ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001136:	2027      	movs	r0, #39	@ 0x27
 8001138:	f001 f8e3 	bl	8002302 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800113c:	bf00      	nop
 800113e:	3728      	adds	r7, #40	@ 0x28
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40004800 	.word	0x40004800
 8001148:	40023800 	.word	0x40023800
 800114c:	40020800 	.word	0x40020800

08001150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <NMI_Handler+0x4>

08001158 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <HardFault_Handler+0x4>

08001160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <MemManage_Handler+0x4>

08001168 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <BusFault_Handler+0x4>

08001170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001174:	bf00      	nop
 8001176:	e7fd      	b.n	8001174 <UsageFault_Handler+0x4>

08001178 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a8:	f000 f8fe 	bl	80013a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /*Support to print time stamp in CAN log*/
  TimeStamp ++;
 80011ac:	4b03      	ldr	r3, [pc, #12]	@ (80011bc <SysTick_Handler+0x18>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	3301      	adds	r3, #1
 80011b2:	4a02      	ldr	r2, [pc, #8]	@ (80011bc <SysTick_Handler+0x18>)
 80011b4:	6013      	str	r3, [r2, #0]


  /* USER CODE END SysTick_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2000121c 	.word	0x2000121c

080011c0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80011c4:	2001      	movs	r0, #1
 80011c6:	f001 fafd 	bl	80027c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80011d4:	4803      	ldr	r0, [pc, #12]	@ (80011e4 <CAN1_RX0_IRQHandler+0x14>)
 80011d6:	f000 fd63 	bl	8001ca0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  HAL_CAN_RxFifo0MsgPendingCallBack(&hcan1);
 80011da:	4802      	ldr	r0, [pc, #8]	@ (80011e4 <CAN1_RX0_IRQHandler+0x14>)
 80011dc:	f7ff fdd6 	bl	8000d8c <HAL_CAN_RxFifo0MsgPendingCallBack>
//HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &CAN1_pHeaderRx, CAN1_DATA_RX);
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000098 	.word	0x20000098

080011e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011ec:	4804      	ldr	r0, [pc, #16]	@ (8001200 <USART3_IRQHandler+0x18>)
 80011ee:	f002 f8a5 	bl	800333c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Receive_IT(&huart3, &REQ_1BYTE_DATA, 1);
 80011f2:	2201      	movs	r2, #1
 80011f4:	4903      	ldr	r1, [pc, #12]	@ (8001204 <USART3_IRQHandler+0x1c>)
 80011f6:	4802      	ldr	r0, [pc, #8]	@ (8001200 <USART3_IRQHandler+0x18>)
 80011f8:	f002 f87b 	bl	80032f2 <HAL_UART_Receive_IT>
  /* USER CODE END USART3_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200000e8 	.word	0x200000e8
 8001204:	200011f4 	.word	0x200011f4

08001208 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */
	uint8_t NumByteSend;
  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800120c:	4803      	ldr	r0, [pc, #12]	@ (800121c <CAN2_RX0_IRQHandler+0x14>)
 800120e:	f000 fd47 	bl	8001ca0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */
  HAL_CAN_RxFifo0MsgPendingCallBack(&hcan2);
 8001212:	4802      	ldr	r0, [pc, #8]	@ (800121c <CAN2_RX0_IRQHandler+0x14>)
 8001214:	f7ff fdba 	bl	8000d8c <HAL_CAN_RxFifo0MsgPendingCallBack>
//	HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &CAN2_pHeaderRx, CAN2_DATA_RX);
  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	200000c0 	.word	0x200000c0

08001220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001228:	4a14      	ldr	r2, [pc, #80]	@ (800127c <_sbrk+0x5c>)
 800122a:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <_sbrk+0x60>)
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001234:	4b13      	ldr	r3, [pc, #76]	@ (8001284 <_sbrk+0x64>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d102      	bne.n	8001242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800123c:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <_sbrk+0x64>)
 800123e:	4a12      	ldr	r2, [pc, #72]	@ (8001288 <_sbrk+0x68>)
 8001240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001242:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <_sbrk+0x64>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	429a      	cmp	r2, r3
 800124e:	d207      	bcs.n	8001260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001250:	f002 fff2 	bl	8004238 <__errno>
 8001254:	4603      	mov	r3, r0
 8001256:	220c      	movs	r2, #12
 8001258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	e009      	b.n	8001274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001260:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <_sbrk+0x64>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001266:	4b07      	ldr	r3, [pc, #28]	@ (8001284 <_sbrk+0x64>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	4a05      	ldr	r2, [pc, #20]	@ (8001284 <_sbrk+0x64>)
 8001270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001272:	68fb      	ldr	r3, [r7, #12]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20020000 	.word	0x20020000
 8001280:	00000400 	.word	0x00000400
 8001284:	2000122c 	.word	0x2000122c
 8001288:	20001380 	.word	0x20001380

0800128c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001290:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <SystemInit+0x20>)
 8001292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001296:	4a05      	ldr	r2, [pc, #20]	@ (80012ac <SystemInit+0x20>)
 8001298:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800129c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012b4:	480d      	ldr	r0, [pc, #52]	@ (80012ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012b6:	490e      	ldr	r1, [pc, #56]	@ (80012f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012b8:	4a0e      	ldr	r2, [pc, #56]	@ (80012f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012bc:	e002      	b.n	80012c4 <LoopCopyDataInit>

080012be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c2:	3304      	adds	r3, #4

080012c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c8:	d3f9      	bcc.n	80012be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ca:	4a0b      	ldr	r2, [pc, #44]	@ (80012f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012cc:	4c0b      	ldr	r4, [pc, #44]	@ (80012fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d0:	e001      	b.n	80012d6 <LoopFillZerobss>

080012d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d4:	3204      	adds	r2, #4

080012d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d8:	d3fb      	bcc.n	80012d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012da:	f7ff ffd7 	bl	800128c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012de:	f002 ffb1 	bl	8004244 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012e2:	f7ff f93d 	bl	8000560 <main>
  bx  lr    
 80012e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80012f4:	08004c18 	.word	0x08004c18
  ldr r2, =_sbss
 80012f8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80012fc:	2000137c 	.word	0x2000137c

08001300 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001300:	e7fe      	b.n	8001300 <ADC_IRQHandler>
	...

08001304 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001308:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <HAL_Init+0x40>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0d      	ldr	r2, [pc, #52]	@ (8001344 <HAL_Init+0x40>)
 800130e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001312:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001314:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <HAL_Init+0x40>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a0a      	ldr	r2, [pc, #40]	@ (8001344 <HAL_Init+0x40>)
 800131a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800131e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001320:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <HAL_Init+0x40>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a07      	ldr	r2, [pc, #28]	@ (8001344 <HAL_Init+0x40>)
 8001326:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800132a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800132c:	2003      	movs	r0, #3
 800132e:	f000 ffc1 	bl	80022b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001332:	2000      	movs	r0, #0
 8001334:	f000 f808 	bl	8001348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001338:	f7ff fde2 	bl	8000f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023c00 	.word	0x40023c00

08001348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001350:	4b12      	ldr	r3, [pc, #72]	@ (800139c <HAL_InitTick+0x54>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <HAL_InitTick+0x58>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4619      	mov	r1, r3
 800135a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800135e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001362:	fbb2 f3f3 	udiv	r3, r2, r3
 8001366:	4618      	mov	r0, r3
 8001368:	f000 ffd9 	bl	800231e <HAL_SYSTICK_Config>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e00e      	b.n	8001394 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b0f      	cmp	r3, #15
 800137a:	d80a      	bhi.n	8001392 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800137c:	2200      	movs	r2, #0
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	f000 ffa1 	bl	80022ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001388:	4a06      	ldr	r2, [pc, #24]	@ (80013a4 <HAL_InitTick+0x5c>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	e000      	b.n	8001394 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000020 	.word	0x20000020
 80013a0:	20000028 	.word	0x20000028
 80013a4:	20000024 	.word	0x20000024

080013a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013ac:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <HAL_IncTick+0x20>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	461a      	mov	r2, r3
 80013b2:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <HAL_IncTick+0x24>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4413      	add	r3, r2
 80013b8:	4a04      	ldr	r2, [pc, #16]	@ (80013cc <HAL_IncTick+0x24>)
 80013ba:	6013      	str	r3, [r2, #0]
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000028 	.word	0x20000028
 80013cc:	20001230 	.word	0x20001230

080013d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return uwTick;
 80013d4:	4b03      	ldr	r3, [pc, #12]	@ (80013e4 <HAL_GetTick+0x14>)
 80013d6:	681b      	ldr	r3, [r3, #0]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20001230 	.word	0x20001230

080013e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f0:	f7ff ffee 	bl	80013d0 <HAL_GetTick>
 80013f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001400:	d005      	beq.n	800140e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001402:	4b0a      	ldr	r3, [pc, #40]	@ (800142c <HAL_Delay+0x44>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4413      	add	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800140e:	bf00      	nop
 8001410:	f7ff ffde 	bl	80013d0 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	429a      	cmp	r2, r3
 800141e:	d8f7      	bhi.n	8001410 <HAL_Delay+0x28>
  {
  }
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000028 	.word	0x20000028

08001430 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e0ed      	b.n	800161e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d102      	bne.n	8001454 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff fd7e 	bl	8000f50 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f042 0201 	orr.w	r2, r2, #1
 8001462:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001464:	f7ff ffb4 	bl	80013d0 <HAL_GetTick>
 8001468:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800146a:	e012      	b.n	8001492 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800146c:	f7ff ffb0 	bl	80013d0 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b0a      	cmp	r3, #10
 8001478:	d90b      	bls.n	8001492 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800147e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2205      	movs	r2, #5
 800148a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e0c5      	b.n	800161e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0e5      	beq.n	800146c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 0202 	bic.w	r2, r2, #2
 80014ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b0:	f7ff ff8e 	bl	80013d0 <HAL_GetTick>
 80014b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014b6:	e012      	b.n	80014de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014b8:	f7ff ff8a 	bl	80013d0 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b0a      	cmp	r3, #10
 80014c4:	d90b      	bls.n	80014de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2205      	movs	r2, #5
 80014d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e09f      	b.n	800161e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1e5      	bne.n	80014b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7e1b      	ldrb	r3, [r3, #24]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d108      	bne.n	8001506 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	e007      	b.n	8001516 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001514:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	7e5b      	ldrb	r3, [r3, #25]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d108      	bne.n	8001530 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	e007      	b.n	8001540 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800153e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	7e9b      	ldrb	r3, [r3, #26]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d108      	bne.n	800155a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 0220 	orr.w	r2, r2, #32
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	e007      	b.n	800156a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 0220 	bic.w	r2, r2, #32
 8001568:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	7edb      	ldrb	r3, [r3, #27]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d108      	bne.n	8001584 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 0210 	bic.w	r2, r2, #16
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	e007      	b.n	8001594 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f042 0210 	orr.w	r2, r2, #16
 8001592:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	7f1b      	ldrb	r3, [r3, #28]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d108      	bne.n	80015ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 0208 	orr.w	r2, r2, #8
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	e007      	b.n	80015be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 0208 	bic.w	r2, r2, #8
 80015bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	7f5b      	ldrb	r3, [r3, #29]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d108      	bne.n	80015d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f042 0204 	orr.w	r2, r2, #4
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	e007      	b.n	80015e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 0204 	bic.w	r2, r2, #4
 80015e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	ea42 0103 	orr.w	r1, r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	1e5a      	subs	r2, r3, #1
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001628:	b480      	push	{r7}
 800162a:	b087      	sub	sp, #28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800163e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001640:	7cfb      	ldrb	r3, [r7, #19]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d003      	beq.n	800164e <HAL_CAN_ConfigFilter+0x26>
 8001646:	7cfb      	ldrb	r3, [r7, #19]
 8001648:	2b02      	cmp	r3, #2
 800164a:	f040 80be 	bne.w	80017ca <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800164e:	4b65      	ldr	r3, [pc, #404]	@ (80017e4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001650:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001658:	f043 0201 	orr.w	r2, r3, #1
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001668:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167c:	021b      	lsls	r3, r3, #8
 800167e:	431a      	orrs	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	f003 031f 	and.w	r3, r3, #31
 800168e:	2201      	movs	r2, #1
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	43db      	mvns	r3, r3
 80016a0:	401a      	ands	r2, r3
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	69db      	ldr	r3, [r3, #28]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d123      	bne.n	80016f8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	401a      	ands	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80016d2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	3248      	adds	r2, #72	@ 0x48
 80016d8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016ec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016ee:	6979      	ldr	r1, [r7, #20]
 80016f0:	3348      	adds	r3, #72	@ 0x48
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	440b      	add	r3, r1
 80016f6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d122      	bne.n	8001746 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	431a      	orrs	r2, r3
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001720:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3248      	adds	r2, #72	@ 0x48
 8001726:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800173a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800173c:	6979      	ldr	r1, [r7, #20]
 800173e:	3348      	adds	r3, #72	@ 0x48
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	440b      	add	r3, r1
 8001744:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d109      	bne.n	8001762 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	43db      	mvns	r3, r3
 8001758:	401a      	ands	r2, r3
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001760:	e007      	b.n	8001772 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	431a      	orrs	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d109      	bne.n	800178e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	43db      	mvns	r3, r3
 8001784:	401a      	ands	r2, r3
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800178c:	e007      	b.n	800179e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	431a      	orrs	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d107      	bne.n	80017b6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	431a      	orrs	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80017bc:	f023 0201 	bic.w	r2, r3, #1
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	e006      	b.n	80017d8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
  }
}
 80017d8:	4618      	mov	r0, r3
 80017da:	371c      	adds	r7, #28
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	40006400 	.word	0x40006400

080017e8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d12e      	bne.n	800185a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2202      	movs	r2, #2
 8001800:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 0201 	bic.w	r2, r2, #1
 8001812:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001814:	f7ff fddc 	bl	80013d0 <HAL_GetTick>
 8001818:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800181a:	e012      	b.n	8001842 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800181c:	f7ff fdd8 	bl	80013d0 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b0a      	cmp	r3, #10
 8001828:	d90b      	bls.n	8001842 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2205      	movs	r2, #5
 800183a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e012      	b.n	8001868 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1e5      	bne.n	800181c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	e006      	b.n	8001868 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
  }
}
 8001868:	4618      	mov	r0, r3
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001870:	b480      	push	{r7}
 8001872:	b089      	sub	sp, #36	@ 0x24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001884:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800188e:	7ffb      	ldrb	r3, [r7, #31]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d003      	beq.n	800189c <HAL_CAN_AddTxMessage+0x2c>
 8001894:	7ffb      	ldrb	r3, [r7, #31]
 8001896:	2b02      	cmp	r3, #2
 8001898:	f040 80ad 	bne.w	80019f6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10a      	bne.n	80018bc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d105      	bne.n	80018bc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 8095 	beq.w	80019e6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	0e1b      	lsrs	r3, r3, #24
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80018c6:	2201      	movs	r2, #1
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	409a      	lsls	r2, r3
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d10d      	bne.n	80018f4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80018e2:	68f9      	ldr	r1, [r7, #12]
 80018e4:	6809      	ldr	r1, [r1, #0]
 80018e6:	431a      	orrs	r2, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	3318      	adds	r3, #24
 80018ec:	011b      	lsls	r3, r3, #4
 80018ee:	440b      	add	r3, r1
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	e00f      	b.n	8001914 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018fe:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001904:	68f9      	ldr	r1, [r7, #12]
 8001906:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001908:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	3318      	adds	r3, #24
 800190e:	011b      	lsls	r3, r3, #4
 8001910:	440b      	add	r3, r1
 8001912:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6819      	ldr	r1, [r3, #0]
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	691a      	ldr	r2, [r3, #16]
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	3318      	adds	r3, #24
 8001920:	011b      	lsls	r3, r3, #4
 8001922:	440b      	add	r3, r1
 8001924:	3304      	adds	r3, #4
 8001926:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	7d1b      	ldrb	r3, [r3, #20]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d111      	bne.n	8001954 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	3318      	adds	r3, #24
 8001938:	011b      	lsls	r3, r3, #4
 800193a:	4413      	add	r3, r2
 800193c:	3304      	adds	r3, #4
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	6811      	ldr	r1, [r2, #0]
 8001944:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	3318      	adds	r3, #24
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	440b      	add	r3, r1
 8001950:	3304      	adds	r3, #4
 8001952:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3307      	adds	r3, #7
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	061a      	lsls	r2, r3, #24
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3306      	adds	r3, #6
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	041b      	lsls	r3, r3, #16
 8001964:	431a      	orrs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	3305      	adds	r3, #5
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	021b      	lsls	r3, r3, #8
 800196e:	4313      	orrs	r3, r2
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	3204      	adds	r2, #4
 8001974:	7812      	ldrb	r2, [r2, #0]
 8001976:	4610      	mov	r0, r2
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	6811      	ldr	r1, [r2, #0]
 800197c:	ea43 0200 	orr.w	r2, r3, r0
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	011b      	lsls	r3, r3, #4
 8001984:	440b      	add	r3, r1
 8001986:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800198a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3303      	adds	r3, #3
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	061a      	lsls	r2, r3, #24
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3302      	adds	r3, #2
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	041b      	lsls	r3, r3, #16
 800199c:	431a      	orrs	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3301      	adds	r3, #1
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	021b      	lsls	r3, r3, #8
 80019a6:	4313      	orrs	r3, r2
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	7812      	ldrb	r2, [r2, #0]
 80019ac:	4610      	mov	r0, r2
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	6811      	ldr	r1, [r2, #0]
 80019b2:	ea43 0200 	orr.w	r2, r3, r0
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	440b      	add	r3, r1
 80019bc:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80019c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	3318      	adds	r3, #24
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	4413      	add	r3, r2
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	6811      	ldr	r1, [r2, #0]
 80019d4:	f043 0201 	orr.w	r2, r3, #1
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	3318      	adds	r3, #24
 80019dc:	011b      	lsls	r3, r3, #4
 80019de:	440b      	add	r3, r1
 80019e0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	e00e      	b.n	8001a04 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e006      	b.n	8001a04 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
  }
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3724      	adds	r7, #36	@ 0x24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001a10:	b480      	push	{r7}
 8001a12:	b087      	sub	sp, #28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
 8001a1c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a24:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a26:	7dfb      	ldrb	r3, [r7, #23]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d003      	beq.n	8001a34 <HAL_CAN_GetRxMessage+0x24>
 8001a2c:	7dfb      	ldrb	r3, [r7, #23]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	f040 8103 	bne.w	8001c3a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10e      	bne.n	8001a58 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d116      	bne.n	8001a76 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0f7      	b.n	8001c48 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d107      	bne.n	8001a76 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e0e8      	b.n	8001c48 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	331b      	adds	r3, #27
 8001a7e:	011b      	lsls	r3, r3, #4
 8001a80:	4413      	add	r3, r2
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0204 	and.w	r2, r3, #4
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d10c      	bne.n	8001aae <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	331b      	adds	r3, #27
 8001a9c:	011b      	lsls	r3, r3, #4
 8001a9e:	4413      	add	r3, r2
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	0d5b      	lsrs	r3, r3, #21
 8001aa4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	e00b      	b.n	8001ac6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	331b      	adds	r3, #27
 8001ab6:	011b      	lsls	r3, r3, #4
 8001ab8:	4413      	add	r3, r2
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	08db      	lsrs	r3, r3, #3
 8001abe:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	331b      	adds	r3, #27
 8001ace:	011b      	lsls	r3, r3, #4
 8001ad0:	4413      	add	r3, r2
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0202 	and.w	r2, r3, #2
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	331b      	adds	r3, #27
 8001ae4:	011b      	lsls	r3, r3, #4
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3304      	adds	r3, #4
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2208      	movs	r2, #8
 8001af8:	611a      	str	r2, [r3, #16]
 8001afa:	e00b      	b.n	8001b14 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	331b      	adds	r3, #27
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	4413      	add	r3, r2
 8001b08:	3304      	adds	r3, #4
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 020f 	and.w	r2, r3, #15
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	331b      	adds	r3, #27
 8001b1c:	011b      	lsls	r3, r3, #4
 8001b1e:	4413      	add	r3, r2
 8001b20:	3304      	adds	r3, #4
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	331b      	adds	r3, #27
 8001b34:	011b      	lsls	r3, r3, #4
 8001b36:	4413      	add	r3, r2
 8001b38:	3304      	adds	r3, #4
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	0c1b      	lsrs	r3, r3, #16
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	011b      	lsls	r3, r3, #4
 8001b4c:	4413      	add	r3, r2
 8001b4e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	4413      	add	r3, r2
 8001b64:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	0a1a      	lsrs	r2, r3, #8
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	4413      	add	r3, r2
 8001b7e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	0c1a      	lsrs	r2, r3, #16
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	3302      	adds	r3, #2
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	4413      	add	r3, r2
 8001b98:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	0e1a      	lsrs	r2, r3, #24
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	3303      	adds	r3, #3
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	011b      	lsls	r3, r3, #4
 8001bb0:	4413      	add	r3, r2
 8001bb2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	3304      	adds	r3, #4
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	4413      	add	r3, r2
 8001bca:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	0a1a      	lsrs	r2, r3, #8
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	3305      	adds	r3, #5
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	4413      	add	r3, r2
 8001be4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	0c1a      	lsrs	r2, r3, #16
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	3306      	adds	r3, #6
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	4413      	add	r3, r2
 8001bfe:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	0e1a      	lsrs	r2, r3, #24
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	3307      	adds	r3, #7
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d108      	bne.n	8001c26 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0220 	orr.w	r2, r2, #32
 8001c22:	60da      	str	r2, [r3, #12]
 8001c24:	e007      	b.n	8001c36 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f042 0220 	orr.w	r2, r2, #32
 8001c34:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	e006      	b.n	8001c48 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
  }
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	371c      	adds	r7, #28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c64:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d002      	beq.n	8001c72 <HAL_CAN_ActivateNotification+0x1e>
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d109      	bne.n	8001c86 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6959      	ldr	r1, [r3, #20]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e006      	b.n	8001c94 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
  }
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	@ 0x28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d07c      	beq.n	8001de0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d023      	beq.n	8001d38 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f983 	bl	800200e <HAL_CAN_TxMailbox0CompleteCallback>
 8001d08:	e016      	b.n	8001d38 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d004      	beq.n	8001d1e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d16:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d1c:	e00c      	b.n	8001d38 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d004      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d30:	e002      	b.n	8001d38 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f989 	bl	800204a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d024      	beq.n	8001d8c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d4a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f963 	bl	8002022 <HAL_CAN_TxMailbox1CompleteCallback>
 8001d5c:	e016      	b.n	8001d8c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d004      	beq.n	8001d72 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d70:	e00c      	b.n	8001d8c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d004      	beq.n	8001d86 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d84:	e002      	b.n	8001d8c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f969 	bl	800205e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d024      	beq.n	8001de0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d9e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f943 	bl	8002036 <HAL_CAN_TxMailbox2CompleteCallback>
 8001db0:	e016      	b.n	8001de0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d004      	beq.n	8001dc6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dc4:	e00c      	b.n	8001de0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d004      	beq.n	8001dda <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dd8:	e002      	b.n	8001de0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f949 	bl	8002072 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00c      	beq.n	8001e04 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	f003 0310 	and.w	r3, r3, #16
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d007      	beq.n	8001e04 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dfa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2210      	movs	r2, #16
 8001e02:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00b      	beq.n	8001e26 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f003 0308 	and.w	r3, r3, #8
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d006      	beq.n	8001e26 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2208      	movs	r2, #8
 8001e1e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f93a 	bl	800209a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d009      	beq.n	8001e44 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d002      	beq.n	8001e44 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f921 	bl	8002086 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001e44:	6a3b      	ldr	r3, [r7, #32]
 8001e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00c      	beq.n	8001e68 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	f003 0310 	and.w	r3, r3, #16
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d007      	beq.n	8001e68 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e5e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2210      	movs	r2, #16
 8001e66:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	f003 0320 	and.w	r3, r3, #32
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00b      	beq.n	8001e8a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d006      	beq.n	8001e8a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2208      	movs	r2, #8
 8001e82:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f91c 	bl	80020c2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d009      	beq.n	8001ea8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d002      	beq.n	8001ea8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f903 	bl	80020ae <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00b      	beq.n	8001eca <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	f003 0310 	and.w	r3, r3, #16
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d006      	beq.n	8001eca <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2210      	movs	r2, #16
 8001ec2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f906 	bl	80020d6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001eca:	6a3b      	ldr	r3, [r7, #32]
 8001ecc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00b      	beq.n	8001eec <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d006      	beq.n	8001eec <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2208      	movs	r2, #8
 8001ee4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f8ff 	bl	80020ea <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d07b      	beq.n	8001fee <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d072      	beq.n	8001fe6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d008      	beq.n	8001f1c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d008      	beq.n	8001f38 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f32:	f043 0302 	orr.w	r3, r3, #2
 8001f36:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d008      	beq.n	8001f54 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4e:	f043 0304 	orr.w	r3, r3, #4
 8001f52:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f54:	6a3b      	ldr	r3, [r7, #32]
 8001f56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d043      	beq.n	8001fe6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d03e      	beq.n	8001fe6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f6e:	2b60      	cmp	r3, #96	@ 0x60
 8001f70:	d02b      	beq.n	8001fca <HAL_CAN_IRQHandler+0x32a>
 8001f72:	2b60      	cmp	r3, #96	@ 0x60
 8001f74:	d82e      	bhi.n	8001fd4 <HAL_CAN_IRQHandler+0x334>
 8001f76:	2b50      	cmp	r3, #80	@ 0x50
 8001f78:	d022      	beq.n	8001fc0 <HAL_CAN_IRQHandler+0x320>
 8001f7a:	2b50      	cmp	r3, #80	@ 0x50
 8001f7c:	d82a      	bhi.n	8001fd4 <HAL_CAN_IRQHandler+0x334>
 8001f7e:	2b40      	cmp	r3, #64	@ 0x40
 8001f80:	d019      	beq.n	8001fb6 <HAL_CAN_IRQHandler+0x316>
 8001f82:	2b40      	cmp	r3, #64	@ 0x40
 8001f84:	d826      	bhi.n	8001fd4 <HAL_CAN_IRQHandler+0x334>
 8001f86:	2b30      	cmp	r3, #48	@ 0x30
 8001f88:	d010      	beq.n	8001fac <HAL_CAN_IRQHandler+0x30c>
 8001f8a:	2b30      	cmp	r3, #48	@ 0x30
 8001f8c:	d822      	bhi.n	8001fd4 <HAL_CAN_IRQHandler+0x334>
 8001f8e:	2b10      	cmp	r3, #16
 8001f90:	d002      	beq.n	8001f98 <HAL_CAN_IRQHandler+0x2f8>
 8001f92:	2b20      	cmp	r3, #32
 8001f94:	d005      	beq.n	8001fa2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f96:	e01d      	b.n	8001fd4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9a:	f043 0308 	orr.w	r3, r3, #8
 8001f9e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fa0:	e019      	b.n	8001fd6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa4:	f043 0310 	orr.w	r3, r3, #16
 8001fa8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001faa:	e014      	b.n	8001fd6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fae:	f043 0320 	orr.w	r3, r3, #32
 8001fb2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fb4:	e00f      	b.n	8001fd6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fbc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fbe:	e00a      	b.n	8001fd6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fc6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fc8:	e005      	b.n	8001fd6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fd0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fd2:	e000      	b.n	8001fd6 <HAL_CAN_IRQHandler+0x336>
            break;
 8001fd4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	699a      	ldr	r2, [r3, #24]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001fe4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2204      	movs	r2, #4
 8001fec:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d008      	beq.n	8002006 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f87c 	bl	80020fe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002006:	bf00      	nop
 8002008:	3728      	adds	r7, #40	@ 0x28
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002124:	4b0c      	ldr	r3, [pc, #48]	@ (8002158 <__NVIC_SetPriorityGrouping+0x44>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002130:	4013      	ands	r3, r2
 8002132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800213c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002140:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002146:	4a04      	ldr	r2, [pc, #16]	@ (8002158 <__NVIC_SetPriorityGrouping+0x44>)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	60d3      	str	r3, [r2, #12]
}
 800214c:	bf00      	nop
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002160:	4b04      	ldr	r3, [pc, #16]	@ (8002174 <__NVIC_GetPriorityGrouping+0x18>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	0a1b      	lsrs	r3, r3, #8
 8002166:	f003 0307 	and.w	r3, r3, #7
}
 800216a:	4618      	mov	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002186:	2b00      	cmp	r3, #0
 8002188:	db0b      	blt.n	80021a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	f003 021f 	and.w	r2, r3, #31
 8002190:	4907      	ldr	r1, [pc, #28]	@ (80021b0 <__NVIC_EnableIRQ+0x38>)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	095b      	lsrs	r3, r3, #5
 8002198:	2001      	movs	r0, #1
 800219a:	fa00 f202 	lsl.w	r2, r0, r2
 800219e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	e000e100 	.word	0xe000e100

080021b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	6039      	str	r1, [r7, #0]
 80021be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	db0a      	blt.n	80021de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	490c      	ldr	r1, [pc, #48]	@ (8002200 <__NVIC_SetPriority+0x4c>)
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	0112      	lsls	r2, r2, #4
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	440b      	add	r3, r1
 80021d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021dc:	e00a      	b.n	80021f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	4908      	ldr	r1, [pc, #32]	@ (8002204 <__NVIC_SetPriority+0x50>)
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	3b04      	subs	r3, #4
 80021ec:	0112      	lsls	r2, r2, #4
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	440b      	add	r3, r1
 80021f2:	761a      	strb	r2, [r3, #24]
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000e100 	.word	0xe000e100
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002208:	b480      	push	{r7}
 800220a:	b089      	sub	sp, #36	@ 0x24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f1c3 0307 	rsb	r3, r3, #7
 8002222:	2b04      	cmp	r3, #4
 8002224:	bf28      	it	cs
 8002226:	2304      	movcs	r3, #4
 8002228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3304      	adds	r3, #4
 800222e:	2b06      	cmp	r3, #6
 8002230:	d902      	bls.n	8002238 <NVIC_EncodePriority+0x30>
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3b03      	subs	r3, #3
 8002236:	e000      	b.n	800223a <NVIC_EncodePriority+0x32>
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800223c:	f04f 32ff 	mov.w	r2, #4294967295
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43da      	mvns	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	401a      	ands	r2, r3
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002250:	f04f 31ff 	mov.w	r1, #4294967295
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	43d9      	mvns	r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002260:	4313      	orrs	r3, r2
         );
}
 8002262:	4618      	mov	r0, r3
 8002264:	3724      	adds	r7, #36	@ 0x24
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3b01      	subs	r3, #1
 800227c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002280:	d301      	bcc.n	8002286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002282:	2301      	movs	r3, #1
 8002284:	e00f      	b.n	80022a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002286:	4a0a      	ldr	r2, [pc, #40]	@ (80022b0 <SysTick_Config+0x40>)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800228e:	210f      	movs	r1, #15
 8002290:	f04f 30ff 	mov.w	r0, #4294967295
 8002294:	f7ff ff8e 	bl	80021b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002298:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <SysTick_Config+0x40>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800229e:	4b04      	ldr	r3, [pc, #16]	@ (80022b0 <SysTick_Config+0x40>)
 80022a0:	2207      	movs	r2, #7
 80022a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	e000e010 	.word	0xe000e010

080022b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff ff29 	bl	8002114 <__NVIC_SetPriorityGrouping>
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	4603      	mov	r3, r0
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
 80022d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022dc:	f7ff ff3e 	bl	800215c <__NVIC_GetPriorityGrouping>
 80022e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	6978      	ldr	r0, [r7, #20]
 80022e8:	f7ff ff8e 	bl	8002208 <NVIC_EncodePriority>
 80022ec:	4602      	mov	r2, r0
 80022ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff5d 	bl	80021b4 <__NVIC_SetPriority>
}
 80022fa:	bf00      	nop
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800230c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff ff31 	bl	8002178 <__NVIC_EnableIRQ>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff ffa2 	bl	8002270 <SysTick_Config>
 800232c:	4603      	mov	r3, r0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b084      	sub	sp, #16
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002342:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002344:	f7ff f844 	bl	80013d0 <HAL_GetTick>
 8002348:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d008      	beq.n	8002368 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2280      	movs	r2, #128	@ 0x80
 800235a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e052      	b.n	800240e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0216 	bic.w	r2, r2, #22
 8002376:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695a      	ldr	r2, [r3, #20]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002386:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238c:	2b00      	cmp	r3, #0
 800238e:	d103      	bne.n	8002398 <HAL_DMA_Abort+0x62>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002394:	2b00      	cmp	r3, #0
 8002396:	d007      	beq.n	80023a8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0208 	bic.w	r2, r2, #8
 80023a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0201 	bic.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023b8:	e013      	b.n	80023e2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023ba:	f7ff f809 	bl	80013d0 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b05      	cmp	r3, #5
 80023c6:	d90c      	bls.n	80023e2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2220      	movs	r2, #32
 80023cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2203      	movs	r2, #3
 80023d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e015      	b.n	800240e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1e4      	bne.n	80023ba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f4:	223f      	movs	r2, #63	@ 0x3f
 80023f6:	409a      	lsls	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d004      	beq.n	8002434 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2280      	movs	r2, #128	@ 0x80
 800242e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e00c      	b.n	800244e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2205      	movs	r2, #5
 8002438:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0201 	bic.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
	...

0800245c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800245c:	b480      	push	{r7}
 800245e:	b089      	sub	sp, #36	@ 0x24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800246a:	2300      	movs	r3, #0
 800246c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800246e:	2300      	movs	r3, #0
 8002470:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
 8002476:	e16b      	b.n	8002750 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002478:	2201      	movs	r2, #1
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	429a      	cmp	r2, r3
 8002492:	f040 815a 	bne.w	800274a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d005      	beq.n	80024ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d130      	bne.n	8002510 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	2203      	movs	r2, #3
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4013      	ands	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024e4:	2201      	movs	r2, #1
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	091b      	lsrs	r3, r3, #4
 80024fa:	f003 0201 	and.w	r2, r3, #1
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	2b03      	cmp	r3, #3
 800251a:	d017      	beq.n	800254c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	2203      	movs	r2, #3
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d123      	bne.n	80025a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	08da      	lsrs	r2, r3, #3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3208      	adds	r2, #8
 8002560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	220f      	movs	r2, #15
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	08da      	lsrs	r2, r3, #3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3208      	adds	r2, #8
 800259a:	69b9      	ldr	r1, [r7, #24]
 800259c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	2203      	movs	r2, #3
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 0203 	and.w	r2, r3, #3
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 80b4 	beq.w	800274a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	4b60      	ldr	r3, [pc, #384]	@ (8002768 <HAL_GPIO_Init+0x30c>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ea:	4a5f      	ldr	r2, [pc, #380]	@ (8002768 <HAL_GPIO_Init+0x30c>)
 80025ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025f2:	4b5d      	ldr	r3, [pc, #372]	@ (8002768 <HAL_GPIO_Init+0x30c>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025fe:	4a5b      	ldr	r2, [pc, #364]	@ (800276c <HAL_GPIO_Init+0x310>)
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	089b      	lsrs	r3, r3, #2
 8002604:	3302      	adds	r3, #2
 8002606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800260a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	220f      	movs	r2, #15
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	43db      	mvns	r3, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4013      	ands	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a52      	ldr	r2, [pc, #328]	@ (8002770 <HAL_GPIO_Init+0x314>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d02b      	beq.n	8002682 <HAL_GPIO_Init+0x226>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a51      	ldr	r2, [pc, #324]	@ (8002774 <HAL_GPIO_Init+0x318>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d025      	beq.n	800267e <HAL_GPIO_Init+0x222>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a50      	ldr	r2, [pc, #320]	@ (8002778 <HAL_GPIO_Init+0x31c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d01f      	beq.n	800267a <HAL_GPIO_Init+0x21e>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a4f      	ldr	r2, [pc, #316]	@ (800277c <HAL_GPIO_Init+0x320>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d019      	beq.n	8002676 <HAL_GPIO_Init+0x21a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a4e      	ldr	r2, [pc, #312]	@ (8002780 <HAL_GPIO_Init+0x324>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d013      	beq.n	8002672 <HAL_GPIO_Init+0x216>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a4d      	ldr	r2, [pc, #308]	@ (8002784 <HAL_GPIO_Init+0x328>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d00d      	beq.n	800266e <HAL_GPIO_Init+0x212>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a4c      	ldr	r2, [pc, #304]	@ (8002788 <HAL_GPIO_Init+0x32c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d007      	beq.n	800266a <HAL_GPIO_Init+0x20e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a4b      	ldr	r2, [pc, #300]	@ (800278c <HAL_GPIO_Init+0x330>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d101      	bne.n	8002666 <HAL_GPIO_Init+0x20a>
 8002662:	2307      	movs	r3, #7
 8002664:	e00e      	b.n	8002684 <HAL_GPIO_Init+0x228>
 8002666:	2308      	movs	r3, #8
 8002668:	e00c      	b.n	8002684 <HAL_GPIO_Init+0x228>
 800266a:	2306      	movs	r3, #6
 800266c:	e00a      	b.n	8002684 <HAL_GPIO_Init+0x228>
 800266e:	2305      	movs	r3, #5
 8002670:	e008      	b.n	8002684 <HAL_GPIO_Init+0x228>
 8002672:	2304      	movs	r3, #4
 8002674:	e006      	b.n	8002684 <HAL_GPIO_Init+0x228>
 8002676:	2303      	movs	r3, #3
 8002678:	e004      	b.n	8002684 <HAL_GPIO_Init+0x228>
 800267a:	2302      	movs	r3, #2
 800267c:	e002      	b.n	8002684 <HAL_GPIO_Init+0x228>
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <HAL_GPIO_Init+0x228>
 8002682:	2300      	movs	r3, #0
 8002684:	69fa      	ldr	r2, [r7, #28]
 8002686:	f002 0203 	and.w	r2, r2, #3
 800268a:	0092      	lsls	r2, r2, #2
 800268c:	4093      	lsls	r3, r2
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002694:	4935      	ldr	r1, [pc, #212]	@ (800276c <HAL_GPIO_Init+0x310>)
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	089b      	lsrs	r3, r3, #2
 800269a:	3302      	adds	r3, #2
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002790 <HAL_GPIO_Init+0x334>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026c6:	4a32      	ldr	r2, [pc, #200]	@ (8002790 <HAL_GPIO_Init+0x334>)
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026cc:	4b30      	ldr	r3, [pc, #192]	@ (8002790 <HAL_GPIO_Init+0x334>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026f0:	4a27      	ldr	r2, [pc, #156]	@ (8002790 <HAL_GPIO_Init+0x334>)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026f6:	4b26      	ldr	r3, [pc, #152]	@ (8002790 <HAL_GPIO_Init+0x334>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800271a:	4a1d      	ldr	r2, [pc, #116]	@ (8002790 <HAL_GPIO_Init+0x334>)
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002720:	4b1b      	ldr	r3, [pc, #108]	@ (8002790 <HAL_GPIO_Init+0x334>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002744:	4a12      	ldr	r2, [pc, #72]	@ (8002790 <HAL_GPIO_Init+0x334>)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3301      	adds	r3, #1
 800274e:	61fb      	str	r3, [r7, #28]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	2b0f      	cmp	r3, #15
 8002754:	f67f ae90 	bls.w	8002478 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002758:	bf00      	nop
 800275a:	bf00      	nop
 800275c:	3724      	adds	r7, #36	@ 0x24
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40023800 	.word	0x40023800
 800276c:	40013800 	.word	0x40013800
 8002770:	40020000 	.word	0x40020000
 8002774:	40020400 	.word	0x40020400
 8002778:	40020800 	.word	0x40020800
 800277c:	40020c00 	.word	0x40020c00
 8002780:	40021000 	.word	0x40021000
 8002784:	40021400 	.word	0x40021400
 8002788:	40021800 	.word	0x40021800
 800278c:	40021c00 	.word	0x40021c00
 8002790:	40013c00 	.word	0x40013c00

08002794 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691a      	ldr	r2, [r3, #16]
 80027a4:	887b      	ldrh	r3, [r7, #2]
 80027a6:	4013      	ands	r3, r2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027ac:	2301      	movs	r3, #1
 80027ae:	73fb      	strb	r3, [r7, #15]
 80027b0:	e001      	b.n	80027b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027b2:	2300      	movs	r3, #0
 80027b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027ce:	4b08      	ldr	r3, [pc, #32]	@ (80027f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027d0:	695a      	ldr	r2, [r3, #20]
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	4013      	ands	r3, r2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d006      	beq.n	80027e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027da:	4a05      	ldr	r2, [pc, #20]	@ (80027f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027dc:	88fb      	ldrh	r3, [r7, #6]
 80027de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027e0:	88fb      	ldrh	r3, [r7, #6]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 f806 	bl	80027f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40013c00 	.word	0x40013c00

080027f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e267      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d075      	beq.n	8002916 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800282a:	4b88      	ldr	r3, [pc, #544]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 030c 	and.w	r3, r3, #12
 8002832:	2b04      	cmp	r3, #4
 8002834:	d00c      	beq.n	8002850 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002836:	4b85      	ldr	r3, [pc, #532]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800283e:	2b08      	cmp	r3, #8
 8002840:	d112      	bne.n	8002868 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002842:	4b82      	ldr	r3, [pc, #520]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800284a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800284e:	d10b      	bne.n	8002868 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002850:	4b7e      	ldr	r3, [pc, #504]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d05b      	beq.n	8002914 <HAL_RCC_OscConfig+0x108>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d157      	bne.n	8002914 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e242      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002870:	d106      	bne.n	8002880 <HAL_RCC_OscConfig+0x74>
 8002872:	4b76      	ldr	r3, [pc, #472]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a75      	ldr	r2, [pc, #468]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	e01d      	b.n	80028bc <HAL_RCC_OscConfig+0xb0>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002888:	d10c      	bne.n	80028a4 <HAL_RCC_OscConfig+0x98>
 800288a:	4b70      	ldr	r3, [pc, #448]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a6f      	ldr	r2, [pc, #444]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002890:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	4b6d      	ldr	r3, [pc, #436]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a6c      	ldr	r2, [pc, #432]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 800289c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	e00b      	b.n	80028bc <HAL_RCC_OscConfig+0xb0>
 80028a4:	4b69      	ldr	r3, [pc, #420]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a68      	ldr	r2, [pc, #416]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 80028aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	4b66      	ldr	r3, [pc, #408]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a65      	ldr	r2, [pc, #404]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 80028b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d013      	beq.n	80028ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7fe fd84 	bl	80013d0 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028cc:	f7fe fd80 	bl	80013d0 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	@ 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e207      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028de:	4b5b      	ldr	r3, [pc, #364]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f0      	beq.n	80028cc <HAL_RCC_OscConfig+0xc0>
 80028ea:	e014      	b.n	8002916 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ec:	f7fe fd70 	bl	80013d0 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028f4:	f7fe fd6c 	bl	80013d0 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b64      	cmp	r3, #100	@ 0x64
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e1f3      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002906:	4b51      	ldr	r3, [pc, #324]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0xe8>
 8002912:	e000      	b.n	8002916 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d063      	beq.n	80029ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002922:	4b4a      	ldr	r3, [pc, #296]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00b      	beq.n	8002946 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800292e:	4b47      	ldr	r3, [pc, #284]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002936:	2b08      	cmp	r3, #8
 8002938:	d11c      	bne.n	8002974 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800293a:	4b44      	ldr	r3, [pc, #272]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d116      	bne.n	8002974 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002946:	4b41      	ldr	r3, [pc, #260]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d005      	beq.n	800295e <HAL_RCC_OscConfig+0x152>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d001      	beq.n	800295e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e1c7      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4937      	ldr	r1, [pc, #220]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002972:	e03a      	b.n	80029ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d020      	beq.n	80029be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800297c:	4b34      	ldr	r3, [pc, #208]	@ (8002a50 <HAL_RCC_OscConfig+0x244>)
 800297e:	2201      	movs	r2, #1
 8002980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002982:	f7fe fd25 	bl	80013d0 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800298a:	f7fe fd21 	bl	80013d0 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e1a8      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299c:	4b2b      	ldr	r3, [pc, #172]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f0      	beq.n	800298a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a8:	4b28      	ldr	r3, [pc, #160]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4925      	ldr	r1, [pc, #148]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	600b      	str	r3, [r1, #0]
 80029bc:	e015      	b.n	80029ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029be:	4b24      	ldr	r3, [pc, #144]	@ (8002a50 <HAL_RCC_OscConfig+0x244>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c4:	f7fe fd04 	bl	80013d0 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029cc:	f7fe fd00 	bl	80013d0 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e187      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029de:	4b1b      	ldr	r3, [pc, #108]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d036      	beq.n	8002a64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d016      	beq.n	8002a2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029fe:	4b15      	ldr	r3, [pc, #84]	@ (8002a54 <HAL_RCC_OscConfig+0x248>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a04:	f7fe fce4 	bl	80013d0 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a0c:	f7fe fce0 	bl	80013d0 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e167      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCC_OscConfig+0x200>
 8002a2a:	e01b      	b.n	8002a64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a2c:	4b09      	ldr	r3, [pc, #36]	@ (8002a54 <HAL_RCC_OscConfig+0x248>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a32:	f7fe fccd 	bl	80013d0 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a38:	e00e      	b.n	8002a58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a3a:	f7fe fcc9 	bl	80013d0 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d907      	bls.n	8002a58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e150      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	42470000 	.word	0x42470000
 8002a54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a58:	4b88      	ldr	r3, [pc, #544]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002a5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1ea      	bne.n	8002a3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 8097 	beq.w	8002ba0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a72:	2300      	movs	r3, #0
 8002a74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a76:	4b81      	ldr	r3, [pc, #516]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10f      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	4b7d      	ldr	r3, [pc, #500]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8a:	4a7c      	ldr	r2, [pc, #496]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a92:	4b7a      	ldr	r3, [pc, #488]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a9a:	60bb      	str	r3, [r7, #8]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa2:	4b77      	ldr	r3, [pc, #476]	@ (8002c80 <HAL_RCC_OscConfig+0x474>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d118      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aae:	4b74      	ldr	r3, [pc, #464]	@ (8002c80 <HAL_RCC_OscConfig+0x474>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a73      	ldr	r2, [pc, #460]	@ (8002c80 <HAL_RCC_OscConfig+0x474>)
 8002ab4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aba:	f7fe fc89 	bl	80013d0 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac2:	f7fe fc85 	bl	80013d0 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e10c      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad4:	4b6a      	ldr	r3, [pc, #424]	@ (8002c80 <HAL_RCC_OscConfig+0x474>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d106      	bne.n	8002af6 <HAL_RCC_OscConfig+0x2ea>
 8002ae8:	4b64      	ldr	r3, [pc, #400]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aec:	4a63      	ldr	r2, [pc, #396]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002af4:	e01c      	b.n	8002b30 <HAL_RCC_OscConfig+0x324>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b05      	cmp	r3, #5
 8002afc:	d10c      	bne.n	8002b18 <HAL_RCC_OscConfig+0x30c>
 8002afe:	4b5f      	ldr	r3, [pc, #380]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b02:	4a5e      	ldr	r2, [pc, #376]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b04:	f043 0304 	orr.w	r3, r3, #4
 8002b08:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b0a:	4b5c      	ldr	r3, [pc, #368]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b0e:	4a5b      	ldr	r2, [pc, #364]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b16:	e00b      	b.n	8002b30 <HAL_RCC_OscConfig+0x324>
 8002b18:	4b58      	ldr	r3, [pc, #352]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b1c:	4a57      	ldr	r2, [pc, #348]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b1e:	f023 0301 	bic.w	r3, r3, #1
 8002b22:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b24:	4b55      	ldr	r3, [pc, #340]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b28:	4a54      	ldr	r2, [pc, #336]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b2a:	f023 0304 	bic.w	r3, r3, #4
 8002b2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d015      	beq.n	8002b64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b38:	f7fe fc4a 	bl	80013d0 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3e:	e00a      	b.n	8002b56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b40:	f7fe fc46 	bl	80013d0 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e0cb      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b56:	4b49      	ldr	r3, [pc, #292]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0ee      	beq.n	8002b40 <HAL_RCC_OscConfig+0x334>
 8002b62:	e014      	b.n	8002b8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b64:	f7fe fc34 	bl	80013d0 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b6a:	e00a      	b.n	8002b82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b6c:	f7fe fc30 	bl	80013d0 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e0b5      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b82:	4b3e      	ldr	r3, [pc, #248]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1ee      	bne.n	8002b6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b8e:	7dfb      	ldrb	r3, [r7, #23]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d105      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b94:	4b39      	ldr	r3, [pc, #228]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b98:	4a38      	ldr	r2, [pc, #224]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 80a1 	beq.w	8002cec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002baa:	4b34      	ldr	r3, [pc, #208]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d05c      	beq.n	8002c70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d141      	bne.n	8002c42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bbe:	4b31      	ldr	r3, [pc, #196]	@ (8002c84 <HAL_RCC_OscConfig+0x478>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc4:	f7fe fc04 	bl	80013d0 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bcc:	f7fe fc00 	bl	80013d0 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e087      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bde:	4b27      	ldr	r3, [pc, #156]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69da      	ldr	r2, [r3, #28]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	019b      	lsls	r3, r3, #6
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c00:	085b      	lsrs	r3, r3, #1
 8002c02:	3b01      	subs	r3, #1
 8002c04:	041b      	lsls	r3, r3, #16
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0c:	061b      	lsls	r3, r3, #24
 8002c0e:	491b      	ldr	r1, [pc, #108]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c14:	4b1b      	ldr	r3, [pc, #108]	@ (8002c84 <HAL_RCC_OscConfig+0x478>)
 8002c16:	2201      	movs	r2, #1
 8002c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1a:	f7fe fbd9 	bl	80013d0 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c22:	f7fe fbd5 	bl	80013d0 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e05c      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c34:	4b11      	ldr	r3, [pc, #68]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0f0      	beq.n	8002c22 <HAL_RCC_OscConfig+0x416>
 8002c40:	e054      	b.n	8002cec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c42:	4b10      	ldr	r3, [pc, #64]	@ (8002c84 <HAL_RCC_OscConfig+0x478>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c48:	f7fe fbc2 	bl	80013d0 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c50:	f7fe fbbe 	bl	80013d0 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e045      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c62:	4b06      	ldr	r3, [pc, #24]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0x444>
 8002c6e:	e03d      	b.n	8002cec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d107      	bne.n	8002c88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e038      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	40007000 	.word	0x40007000
 8002c84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c88:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ec>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d028      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d121      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d11a      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002cb8:	4013      	ands	r3, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d111      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cce:	085b      	lsrs	r3, r3, #1
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d107      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d001      	beq.n	8002cec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40023800 	.word	0x40023800

08002cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e0cc      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d10:	4b68      	ldr	r3, [pc, #416]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d90c      	bls.n	8002d38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1e:	4b65      	ldr	r3, [pc, #404]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d26:	4b63      	ldr	r3, [pc, #396]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d001      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e0b8      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d020      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d50:	4b59      	ldr	r3, [pc, #356]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	4a58      	ldr	r2, [pc, #352]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0308 	and.w	r3, r3, #8
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d68:	4b53      	ldr	r3, [pc, #332]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	4a52      	ldr	r2, [pc, #328]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d74:	4b50      	ldr	r3, [pc, #320]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	494d      	ldr	r1, [pc, #308]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d044      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d107      	bne.n	8002daa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9a:	4b47      	ldr	r3, [pc, #284]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d119      	bne.n	8002dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e07f      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d003      	beq.n	8002dba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d107      	bne.n	8002dca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dba:	4b3f      	ldr	r3, [pc, #252]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d109      	bne.n	8002dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e06f      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dca:	4b3b      	ldr	r3, [pc, #236]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e067      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dda:	4b37      	ldr	r3, [pc, #220]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f023 0203 	bic.w	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4934      	ldr	r1, [pc, #208]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dec:	f7fe faf0 	bl	80013d0 <HAL_GetTick>
 8002df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df2:	e00a      	b.n	8002e0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df4:	f7fe faec 	bl	80013d0 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e04f      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0a:	4b2b      	ldr	r3, [pc, #172]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 020c 	and.w	r2, r3, #12
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d1eb      	bne.n	8002df4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e1c:	4b25      	ldr	r3, [pc, #148]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d20c      	bcs.n	8002e44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2a:	4b22      	ldr	r3, [pc, #136]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e32:	4b20      	ldr	r3, [pc, #128]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d001      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e032      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e50:	4b19      	ldr	r3, [pc, #100]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	4916      	ldr	r1, [pc, #88]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d009      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e6e:	4b12      	ldr	r3, [pc, #72]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	490e      	ldr	r1, [pc, #56]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e82:	f000 f821 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 8002e86:	4602      	mov	r2, r0
 8002e88:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	091b      	lsrs	r3, r3, #4
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	490a      	ldr	r1, [pc, #40]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002e94:	5ccb      	ldrb	r3, [r1, r3]
 8002e96:	fa22 f303 	lsr.w	r3, r2, r3
 8002e9a:	4a09      	ldr	r2, [pc, #36]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e9e:	4b09      	ldr	r3, [pc, #36]	@ (8002ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe fa50 	bl	8001348 <HAL_InitTick>

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40023c00 	.word	0x40023c00
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	08004bbc 	.word	0x08004bbc
 8002ec0:	20000020 	.word	0x20000020
 8002ec4:	20000024 	.word	0x20000024

08002ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ecc:	b094      	sub	sp, #80	@ 0x50
 8002ece:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ed8:	2300      	movs	r3, #0
 8002eda:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ee0:	4b79      	ldr	r3, [pc, #484]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 030c 	and.w	r3, r3, #12
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d00d      	beq.n	8002f08 <HAL_RCC_GetSysClockFreq+0x40>
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	f200 80e1 	bhi.w	80030b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <HAL_RCC_GetSysClockFreq+0x34>
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d003      	beq.n	8002f02 <HAL_RCC_GetSysClockFreq+0x3a>
 8002efa:	e0db      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002efc:	4b73      	ldr	r3, [pc, #460]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x204>)
 8002efe:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002f00:	e0db      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f02:	4b73      	ldr	r3, [pc, #460]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f06:	e0d8      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f08:	4b6f      	ldr	r3, [pc, #444]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f10:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f12:	4b6d      	ldr	r3, [pc, #436]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d063      	beq.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f1e:	4b6a      	ldr	r3, [pc, #424]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	099b      	lsrs	r3, r3, #6
 8002f24:	2200      	movs	r2, #0
 8002f26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f30:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f32:	2300      	movs	r3, #0
 8002f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f3a:	4622      	mov	r2, r4
 8002f3c:	462b      	mov	r3, r5
 8002f3e:	f04f 0000 	mov.w	r0, #0
 8002f42:	f04f 0100 	mov.w	r1, #0
 8002f46:	0159      	lsls	r1, r3, #5
 8002f48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f4c:	0150      	lsls	r0, r2, #5
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	4621      	mov	r1, r4
 8002f54:	1a51      	subs	r1, r2, r1
 8002f56:	6139      	str	r1, [r7, #16]
 8002f58:	4629      	mov	r1, r5
 8002f5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f6c:	4659      	mov	r1, fp
 8002f6e:	018b      	lsls	r3, r1, #6
 8002f70:	4651      	mov	r1, sl
 8002f72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f76:	4651      	mov	r1, sl
 8002f78:	018a      	lsls	r2, r1, #6
 8002f7a:	4651      	mov	r1, sl
 8002f7c:	ebb2 0801 	subs.w	r8, r2, r1
 8002f80:	4659      	mov	r1, fp
 8002f82:	eb63 0901 	sbc.w	r9, r3, r1
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	f04f 0300 	mov.w	r3, #0
 8002f8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f9a:	4690      	mov	r8, r2
 8002f9c:	4699      	mov	r9, r3
 8002f9e:	4623      	mov	r3, r4
 8002fa0:	eb18 0303 	adds.w	r3, r8, r3
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	462b      	mov	r3, r5
 8002fa8:	eb49 0303 	adc.w	r3, r9, r3
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fba:	4629      	mov	r1, r5
 8002fbc:	024b      	lsls	r3, r1, #9
 8002fbe:	4621      	mov	r1, r4
 8002fc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fc4:	4621      	mov	r1, r4
 8002fc6:	024a      	lsls	r2, r1, #9
 8002fc8:	4610      	mov	r0, r2
 8002fca:	4619      	mov	r1, r3
 8002fcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fce:	2200      	movs	r2, #0
 8002fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002fd8:	f7fd f94a 	bl	8000270 <__aeabi_uldivmod>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fe4:	e058      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe6:	4b38      	ldr	r3, [pc, #224]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	099b      	lsrs	r3, r3, #6
 8002fec:	2200      	movs	r2, #0
 8002fee:	4618      	mov	r0, r3
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ff6:	623b      	str	r3, [r7, #32]
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ffc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003000:	4642      	mov	r2, r8
 8003002:	464b      	mov	r3, r9
 8003004:	f04f 0000 	mov.w	r0, #0
 8003008:	f04f 0100 	mov.w	r1, #0
 800300c:	0159      	lsls	r1, r3, #5
 800300e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003012:	0150      	lsls	r0, r2, #5
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4641      	mov	r1, r8
 800301a:	ebb2 0a01 	subs.w	sl, r2, r1
 800301e:	4649      	mov	r1, r9
 8003020:	eb63 0b01 	sbc.w	fp, r3, r1
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003030:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003034:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003038:	ebb2 040a 	subs.w	r4, r2, sl
 800303c:	eb63 050b 	sbc.w	r5, r3, fp
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	f04f 0300 	mov.w	r3, #0
 8003048:	00eb      	lsls	r3, r5, #3
 800304a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800304e:	00e2      	lsls	r2, r4, #3
 8003050:	4614      	mov	r4, r2
 8003052:	461d      	mov	r5, r3
 8003054:	4643      	mov	r3, r8
 8003056:	18e3      	adds	r3, r4, r3
 8003058:	603b      	str	r3, [r7, #0]
 800305a:	464b      	mov	r3, r9
 800305c:	eb45 0303 	adc.w	r3, r5, r3
 8003060:	607b      	str	r3, [r7, #4]
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800306e:	4629      	mov	r1, r5
 8003070:	028b      	lsls	r3, r1, #10
 8003072:	4621      	mov	r1, r4
 8003074:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003078:	4621      	mov	r1, r4
 800307a:	028a      	lsls	r2, r1, #10
 800307c:	4610      	mov	r0, r2
 800307e:	4619      	mov	r1, r3
 8003080:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003082:	2200      	movs	r2, #0
 8003084:	61bb      	str	r3, [r7, #24]
 8003086:	61fa      	str	r2, [r7, #28]
 8003088:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800308c:	f7fd f8f0 	bl	8000270 <__aeabi_uldivmod>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4613      	mov	r3, r2
 8003096:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003098:	4b0b      	ldr	r3, [pc, #44]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	0c1b      	lsrs	r3, r3, #16
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	3301      	adds	r3, #1
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80030a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030b2:	e002      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030b4:	4b05      	ldr	r3, [pc, #20]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x204>)
 80030b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3750      	adds	r7, #80	@ 0x50
 80030c0:	46bd      	mov	sp, r7
 80030c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030c6:	bf00      	nop
 80030c8:	40023800 	.word	0x40023800
 80030cc:	00f42400 	.word	0x00f42400
 80030d0:	007a1200 	.word	0x007a1200

080030d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030d8:	4b03      	ldr	r3, [pc, #12]	@ (80030e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80030da:	681b      	ldr	r3, [r3, #0]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	20000020 	.word	0x20000020

080030ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030f0:	f7ff fff0 	bl	80030d4 <HAL_RCC_GetHCLKFreq>
 80030f4:	4602      	mov	r2, r0
 80030f6:	4b05      	ldr	r3, [pc, #20]	@ (800310c <HAL_RCC_GetPCLK1Freq+0x20>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	0a9b      	lsrs	r3, r3, #10
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	4903      	ldr	r1, [pc, #12]	@ (8003110 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003102:	5ccb      	ldrb	r3, [r1, r3]
 8003104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003108:	4618      	mov	r0, r3
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40023800 	.word	0x40023800
 8003110:	08004bcc 	.word	0x08004bcc

08003114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003118:	f7ff ffdc 	bl	80030d4 <HAL_RCC_GetHCLKFreq>
 800311c:	4602      	mov	r2, r0
 800311e:	4b05      	ldr	r3, [pc, #20]	@ (8003134 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	0b5b      	lsrs	r3, r3, #13
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	4903      	ldr	r1, [pc, #12]	@ (8003138 <HAL_RCC_GetPCLK2Freq+0x24>)
 800312a:	5ccb      	ldrb	r3, [r1, r3]
 800312c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003130:	4618      	mov	r0, r3
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40023800 	.word	0x40023800
 8003138:	08004bcc 	.word	0x08004bcc

0800313c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e042      	b.n	80031d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d106      	bne.n	8003168 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fd ffa4 	bl	80010b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2224      	movs	r2, #36	@ 0x24
 800316c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800317e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 fdbd 	bl	8003d00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003194:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695a      	ldr	r2, [r3, #20]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08a      	sub	sp, #40	@ 0x28
 80031e0:	af02      	add	r7, sp, #8
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	603b      	str	r3, [r7, #0]
 80031e8:	4613      	mov	r3, r2
 80031ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b20      	cmp	r3, #32
 80031fa:	d175      	bne.n	80032e8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <HAL_UART_Transmit+0x2c>
 8003202:	88fb      	ldrh	r3, [r7, #6]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e06e      	b.n	80032ea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2221      	movs	r2, #33	@ 0x21
 8003216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800321a:	f7fe f8d9 	bl	80013d0 <HAL_GetTick>
 800321e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	88fa      	ldrh	r2, [r7, #6]
 8003224:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	88fa      	ldrh	r2, [r7, #6]
 800322a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003234:	d108      	bne.n	8003248 <HAL_UART_Transmit+0x6c>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d104      	bne.n	8003248 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	61bb      	str	r3, [r7, #24]
 8003246:	e003      	b.n	8003250 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800324c:	2300      	movs	r3, #0
 800324e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003250:	e02e      	b.n	80032b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2200      	movs	r2, #0
 800325a:	2180      	movs	r1, #128	@ 0x80
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 fb1f 	bl	80038a0 <UART_WaitOnFlagUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e03a      	b.n	80032ea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10b      	bne.n	8003292 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003288:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	3302      	adds	r3, #2
 800328e:	61bb      	str	r3, [r7, #24]
 8003290:	e007      	b.n	80032a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	781a      	ldrb	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	3301      	adds	r3, #1
 80032a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1cb      	bne.n	8003252 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2200      	movs	r2, #0
 80032c2:	2140      	movs	r1, #64	@ 0x40
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 faeb 	bl	80038a0 <UART_WaitOnFlagUntilTimeout>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d005      	beq.n	80032dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e006      	b.n	80032ea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2220      	movs	r2, #32
 80032e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80032e4:	2300      	movs	r3, #0
 80032e6:	e000      	b.n	80032ea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80032e8:	2302      	movs	r3, #2
  }
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3720      	adds	r7, #32
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b084      	sub	sp, #16
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	60f8      	str	r0, [r7, #12]
 80032fa:	60b9      	str	r1, [r7, #8]
 80032fc:	4613      	mov	r3, r2
 80032fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b20      	cmp	r3, #32
 800330a:	d112      	bne.n	8003332 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <HAL_UART_Receive_IT+0x26>
 8003312:	88fb      	ldrh	r3, [r7, #6]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e00b      	b.n	8003334 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003322:	88fb      	ldrh	r3, [r7, #6]
 8003324:	461a      	mov	r2, r3
 8003326:	68b9      	ldr	r1, [r7, #8]
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 fb12 	bl	8003952 <UART_Start_Receive_IT>
 800332e:	4603      	mov	r3, r0
 8003330:	e000      	b.n	8003334 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003332:	2302      	movs	r3, #2
  }
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b0ba      	sub	sp, #232	@ 0xe8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003362:	2300      	movs	r3, #0
 8003364:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003368:	2300      	movs	r3, #0
 800336a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800336e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800337a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10f      	bne.n	80033a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003386:	f003 0320 	and.w	r3, r3, #32
 800338a:	2b00      	cmp	r3, #0
 800338c:	d009      	beq.n	80033a2 <HAL_UART_IRQHandler+0x66>
 800338e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003392:	f003 0320 	and.w	r3, r3, #32
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fbf2 	bl	8003b84 <UART_Receive_IT>
      return;
 80033a0:	e25b      	b.n	800385a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80033a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 80de 	beq.w	8003568 <HAL_UART_IRQHandler+0x22c>
 80033ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d106      	bne.n	80033c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033bc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 80d1 	beq.w	8003568 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00b      	beq.n	80033ea <HAL_UART_IRQHandler+0xae>
 80033d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d005      	beq.n	80033ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e2:	f043 0201 	orr.w	r2, r3, #1
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00b      	beq.n	800340e <HAL_UART_IRQHandler+0xd2>
 80033f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d005      	beq.n	800340e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003406:	f043 0202 	orr.w	r2, r3, #2
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800340e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00b      	beq.n	8003432 <HAL_UART_IRQHandler+0xf6>
 800341a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d005      	beq.n	8003432 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342a:	f043 0204 	orr.w	r2, r3, #4
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b00      	cmp	r3, #0
 800343c:	d011      	beq.n	8003462 <HAL_UART_IRQHandler+0x126>
 800343e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b00      	cmp	r3, #0
 8003448:	d105      	bne.n	8003456 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800344a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d005      	beq.n	8003462 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345a:	f043 0208 	orr.w	r2, r3, #8
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 81f2 	beq.w	8003850 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800346c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_UART_IRQHandler+0x14e>
 8003478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 fb7d 	bl	8003b84 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003494:	2b40      	cmp	r3, #64	@ 0x40
 8003496:	bf0c      	ite	eq
 8003498:	2301      	moveq	r3, #1
 800349a:	2300      	movne	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d103      	bne.n	80034b6 <HAL_UART_IRQHandler+0x17a>
 80034ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d04f      	beq.n	8003556 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fa85 	bl	80039c6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c6:	2b40      	cmp	r3, #64	@ 0x40
 80034c8:	d141      	bne.n	800354e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	3314      	adds	r3, #20
 80034d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034d8:	e853 3f00 	ldrex	r3, [r3]
 80034dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80034e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	3314      	adds	r3, #20
 80034f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80034f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80034fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003502:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003506:	e841 2300 	strex	r3, r2, [r1]
 800350a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800350e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1d9      	bne.n	80034ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800351a:	2b00      	cmp	r3, #0
 800351c:	d013      	beq.n	8003546 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003522:	4a7e      	ldr	r2, [pc, #504]	@ (800371c <HAL_UART_IRQHandler+0x3e0>)
 8003524:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800352a:	4618      	mov	r0, r3
 800352c:	f7fe ff73 	bl	8002416 <HAL_DMA_Abort_IT>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d016      	beq.n	8003564 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800353a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003540:	4610      	mov	r0, r2
 8003542:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003544:	e00e      	b.n	8003564 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f994 	bl	8003874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800354c:	e00a      	b.n	8003564 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f990 	bl	8003874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003554:	e006      	b.n	8003564 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f98c 	bl	8003874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003562:	e175      	b.n	8003850 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003564:	bf00      	nop
    return;
 8003566:	e173      	b.n	8003850 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356c:	2b01      	cmp	r3, #1
 800356e:	f040 814f 	bne.w	8003810 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003576:	f003 0310 	and.w	r3, r3, #16
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 8148 	beq.w	8003810 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 8141 	beq.w	8003810 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800358e:	2300      	movs	r3, #0
 8003590:	60bb      	str	r3, [r7, #8]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	60bb      	str	r3, [r7, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ae:	2b40      	cmp	r3, #64	@ 0x40
 80035b0:	f040 80b6 	bne.w	8003720 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 8145 	beq.w	8003854 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80035ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035d2:	429a      	cmp	r2, r3
 80035d4:	f080 813e 	bcs.w	8003854 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035de:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035ea:	f000 8088 	beq.w	80036fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	330c      	adds	r3, #12
 80035f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035fc:	e853 3f00 	ldrex	r3, [r3]
 8003600:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003604:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003608:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800360c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	330c      	adds	r3, #12
 8003616:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800361a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800361e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003622:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003626:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800362a:	e841 2300 	strex	r3, r2, [r1]
 800362e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003632:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1d9      	bne.n	80035ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	3314      	adds	r3, #20
 8003640:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003642:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003644:	e853 3f00 	ldrex	r3, [r3]
 8003648:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800364a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800364c:	f023 0301 	bic.w	r3, r3, #1
 8003650:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	3314      	adds	r3, #20
 800365a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800365e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003662:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003664:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003666:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800366a:	e841 2300 	strex	r3, r2, [r1]
 800366e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003670:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1e1      	bne.n	800363a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	3314      	adds	r3, #20
 800367c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003680:	e853 3f00 	ldrex	r3, [r3]
 8003684:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003686:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003688:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800368c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3314      	adds	r3, #20
 8003696:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800369a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800369c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80036a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80036a2:	e841 2300 	strex	r3, r2, [r1]
 80036a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80036a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1e3      	bne.n	8003676 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	330c      	adds	r3, #12
 80036c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036c6:	e853 3f00 	ldrex	r3, [r3]
 80036ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80036cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036ce:	f023 0310 	bic.w	r3, r3, #16
 80036d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	330c      	adds	r3, #12
 80036dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80036e0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80036e2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80036e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036e8:	e841 2300 	strex	r3, r2, [r1]
 80036ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80036ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1e3      	bne.n	80036bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fe fe1c 	bl	8002336 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2202      	movs	r2, #2
 8003702:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800370c:	b29b      	uxth	r3, r3
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	b29b      	uxth	r3, r3
 8003712:	4619      	mov	r1, r3
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f8b7 	bl	8003888 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800371a:	e09b      	b.n	8003854 <HAL_UART_IRQHandler+0x518>
 800371c:	08003a8d 	.word	0x08003a8d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003728:	b29b      	uxth	r3, r3
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 808e 	beq.w	8003858 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800373c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 8089 	beq.w	8003858 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	330c      	adds	r3, #12
 800374c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003750:	e853 3f00 	ldrex	r3, [r3]
 8003754:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003758:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800375c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	330c      	adds	r3, #12
 8003766:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800376a:	647a      	str	r2, [r7, #68]	@ 0x44
 800376c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003770:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003772:	e841 2300 	strex	r3, r2, [r1]
 8003776:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1e3      	bne.n	8003746 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	3314      	adds	r3, #20
 8003784:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003788:	e853 3f00 	ldrex	r3, [r3]
 800378c:	623b      	str	r3, [r7, #32]
   return(result);
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	f023 0301 	bic.w	r3, r3, #1
 8003794:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3314      	adds	r3, #20
 800379e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80037a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80037a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037aa:	e841 2300 	strex	r3, r2, [r1]
 80037ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1e3      	bne.n	800377e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	330c      	adds	r3, #12
 80037ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	e853 3f00 	ldrex	r3, [r3]
 80037d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f023 0310 	bic.w	r3, r3, #16
 80037da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	330c      	adds	r3, #12
 80037e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80037e8:	61fa      	str	r2, [r7, #28]
 80037ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ec:	69b9      	ldr	r1, [r7, #24]
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	e841 2300 	strex	r3, r2, [r1]
 80037f4:	617b      	str	r3, [r7, #20]
   return(result);
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1e3      	bne.n	80037c4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003802:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003806:	4619      	mov	r1, r3
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f83d 	bl	8003888 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800380e:	e023      	b.n	8003858 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003814:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003818:	2b00      	cmp	r3, #0
 800381a:	d009      	beq.n	8003830 <HAL_UART_IRQHandler+0x4f4>
 800381c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003820:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f943 	bl	8003ab4 <UART_Transmit_IT>
    return;
 800382e:	e014      	b.n	800385a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00e      	beq.n	800385a <HAL_UART_IRQHandler+0x51e>
 800383c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f983 	bl	8003b54 <UART_EndTransmit_IT>
    return;
 800384e:	e004      	b.n	800385a <HAL_UART_IRQHandler+0x51e>
    return;
 8003850:	bf00      	nop
 8003852:	e002      	b.n	800385a <HAL_UART_IRQHandler+0x51e>
      return;
 8003854:	bf00      	nop
 8003856:	e000      	b.n	800385a <HAL_UART_IRQHandler+0x51e>
      return;
 8003858:	bf00      	nop
  }
}
 800385a:	37e8      	adds	r7, #232	@ 0xe8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	603b      	str	r3, [r7, #0]
 80038ac:	4613      	mov	r3, r2
 80038ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038b0:	e03b      	b.n	800392a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b8:	d037      	beq.n	800392a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ba:	f7fd fd89 	bl	80013d0 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	6a3a      	ldr	r2, [r7, #32]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d302      	bcc.n	80038d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e03a      	b.n	800394a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d023      	beq.n	800392a <UART_WaitOnFlagUntilTimeout+0x8a>
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2b80      	cmp	r3, #128	@ 0x80
 80038e6:	d020      	beq.n	800392a <UART_WaitOnFlagUntilTimeout+0x8a>
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b40      	cmp	r3, #64	@ 0x40
 80038ec:	d01d      	beq.n	800392a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d116      	bne.n	800392a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80038fc:	2300      	movs	r3, #0
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 f857 	bl	80039c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2208      	movs	r2, #8
 800391c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e00f      	b.n	800394a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4013      	ands	r3, r2
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	429a      	cmp	r2, r3
 8003938:	bf0c      	ite	eq
 800393a:	2301      	moveq	r3, #1
 800393c:	2300      	movne	r3, #0
 800393e:	b2db      	uxtb	r3, r3
 8003940:	461a      	mov	r2, r3
 8003942:	79fb      	ldrb	r3, [r7, #7]
 8003944:	429a      	cmp	r2, r3
 8003946:	d0b4      	beq.n	80038b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003952:	b480      	push	{r7}
 8003954:	b085      	sub	sp, #20
 8003956:	af00      	add	r7, sp, #0
 8003958:	60f8      	str	r0, [r7, #12]
 800395a:	60b9      	str	r1, [r7, #8]
 800395c:	4613      	mov	r3, r2
 800395e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	88fa      	ldrh	r2, [r7, #6]
 800396a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	88fa      	ldrh	r2, [r7, #6]
 8003970:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2222      	movs	r2, #34	@ 0x22
 800397c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d007      	beq.n	8003998 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003996:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695a      	ldr	r2, [r3, #20]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0220 	orr.w	r2, r2, #32
 80039b6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b095      	sub	sp, #84	@ 0x54
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	330c      	adds	r3, #12
 80039d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d8:	e853 3f00 	ldrex	r3, [r3]
 80039dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80039de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	330c      	adds	r3, #12
 80039ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039ee:	643a      	str	r2, [r7, #64]	@ 0x40
 80039f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039f6:	e841 2300 	strex	r3, r2, [r1]
 80039fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1e5      	bne.n	80039ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3314      	adds	r3, #20
 8003a08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	e853 3f00 	ldrex	r3, [r3]
 8003a10:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	f023 0301 	bic.w	r3, r3, #1
 8003a18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3314      	adds	r3, #20
 8003a20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a2a:	e841 2300 	strex	r3, r2, [r1]
 8003a2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1e5      	bne.n	8003a02 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d119      	bne.n	8003a72 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	330c      	adds	r3, #12
 8003a44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	e853 3f00 	ldrex	r3, [r3]
 8003a4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f023 0310 	bic.w	r3, r3, #16
 8003a54:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	330c      	adds	r3, #12
 8003a5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a5e:	61ba      	str	r2, [r7, #24]
 8003a60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a62:	6979      	ldr	r1, [r7, #20]
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	e841 2300 	strex	r3, r2, [r1]
 8003a6a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1e5      	bne.n	8003a3e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003a80:	bf00      	nop
 8003a82:	3754      	adds	r7, #84	@ 0x54
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f7ff fee4 	bl	8003874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003aac:	bf00      	nop
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b21      	cmp	r3, #33	@ 0x21
 8003ac6:	d13e      	bne.n	8003b46 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ad0:	d114      	bne.n	8003afc <UART_Transmit_IT+0x48>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d110      	bne.n	8003afc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	1c9a      	adds	r2, r3, #2
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	621a      	str	r2, [r3, #32]
 8003afa:	e008      	b.n	8003b0e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	1c59      	adds	r1, r3, #1
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6211      	str	r1, [r2, #32]
 8003b06:	781a      	ldrb	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10f      	bne.n	8003b42 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b30:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b40:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	e000      	b.n	8003b48 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b46:	2302      	movs	r3, #2
  }
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3714      	adds	r7, #20
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b6a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff fe73 	bl	8003860 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08c      	sub	sp, #48	@ 0x30
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b22      	cmp	r3, #34	@ 0x22
 8003b96:	f040 80ae 	bne.w	8003cf6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ba2:	d117      	bne.n	8003bd4 <UART_Receive_IT+0x50>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d113      	bne.n	8003bd4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bcc:	1c9a      	adds	r2, r3, #2
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003bd2:	e026      	b.n	8003c22 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003be6:	d007      	beq.n	8003bf8 <UART_Receive_IT+0x74>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10a      	bne.n	8003c06 <UART_Receive_IT+0x82>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d106      	bne.n	8003c06 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c02:	701a      	strb	r2, [r3, #0]
 8003c04:	e008      	b.n	8003c18 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c16:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	4619      	mov	r1, r3
 8003c30:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d15d      	bne.n	8003cf2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0220 	bic.w	r2, r2, #32
 8003c44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	695a      	ldr	r2, [r3, #20]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0201 	bic.w	r2, r2, #1
 8003c64:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d135      	bne.n	8003ce8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	330c      	adds	r3, #12
 8003c88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	e853 3f00 	ldrex	r3, [r3]
 8003c90:	613b      	str	r3, [r7, #16]
   return(result);
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f023 0310 	bic.w	r3, r3, #16
 8003c98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	330c      	adds	r3, #12
 8003ca0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca2:	623a      	str	r2, [r7, #32]
 8003ca4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca6:	69f9      	ldr	r1, [r7, #28]
 8003ca8:	6a3a      	ldr	r2, [r7, #32]
 8003caa:	e841 2300 	strex	r3, r2, [r1]
 8003cae:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1e5      	bne.n	8003c82 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0310 	and.w	r3, r3, #16
 8003cc0:	2b10      	cmp	r3, #16
 8003cc2:	d10a      	bne.n	8003cda <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	60fb      	str	r3, [r7, #12]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003cde:	4619      	mov	r1, r3
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff fdd1 	bl	8003888 <HAL_UARTEx_RxEventCallback>
 8003ce6:	e002      	b.n	8003cee <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7fc ff71 	bl	8000bd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	e002      	b.n	8003cf8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	e000      	b.n	8003cf8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003cf6:	2302      	movs	r3, #2
  }
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3730      	adds	r7, #48	@ 0x30
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d04:	b0c0      	sub	sp, #256	@ 0x100
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d1c:	68d9      	ldr	r1, [r3, #12]
 8003d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	ea40 0301 	orr.w	r3, r0, r1
 8003d28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	431a      	orrs	r2, r3
 8003d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d58:	f021 010c 	bic.w	r1, r1, #12
 8003d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d66:	430b      	orrs	r3, r1
 8003d68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d7a:	6999      	ldr	r1, [r3, #24]
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	ea40 0301 	orr.w	r3, r0, r1
 8003d86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	4b8f      	ldr	r3, [pc, #572]	@ (8003fcc <UART_SetConfig+0x2cc>)
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d005      	beq.n	8003da0 <UART_SetConfig+0xa0>
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	4b8d      	ldr	r3, [pc, #564]	@ (8003fd0 <UART_SetConfig+0x2d0>)
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d104      	bne.n	8003daa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003da0:	f7ff f9b8 	bl	8003114 <HAL_RCC_GetPCLK2Freq>
 8003da4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003da8:	e003      	b.n	8003db2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003daa:	f7ff f99f 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 8003dae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dbc:	f040 810c 	bne.w	8003fd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003dca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003dce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003dd2:	4622      	mov	r2, r4
 8003dd4:	462b      	mov	r3, r5
 8003dd6:	1891      	adds	r1, r2, r2
 8003dd8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003dda:	415b      	adcs	r3, r3
 8003ddc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003dde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003de2:	4621      	mov	r1, r4
 8003de4:	eb12 0801 	adds.w	r8, r2, r1
 8003de8:	4629      	mov	r1, r5
 8003dea:	eb43 0901 	adc.w	r9, r3, r1
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	f04f 0300 	mov.w	r3, #0
 8003df6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e02:	4690      	mov	r8, r2
 8003e04:	4699      	mov	r9, r3
 8003e06:	4623      	mov	r3, r4
 8003e08:	eb18 0303 	adds.w	r3, r8, r3
 8003e0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e10:	462b      	mov	r3, r5
 8003e12:	eb49 0303 	adc.w	r3, r9, r3
 8003e16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e26:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e2e:	460b      	mov	r3, r1
 8003e30:	18db      	adds	r3, r3, r3
 8003e32:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e34:	4613      	mov	r3, r2
 8003e36:	eb42 0303 	adc.w	r3, r2, r3
 8003e3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e44:	f7fc fa14 	bl	8000270 <__aeabi_uldivmod>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	4b61      	ldr	r3, [pc, #388]	@ (8003fd4 <UART_SetConfig+0x2d4>)
 8003e4e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	011c      	lsls	r4, r3, #4
 8003e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e60:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e68:	4642      	mov	r2, r8
 8003e6a:	464b      	mov	r3, r9
 8003e6c:	1891      	adds	r1, r2, r2
 8003e6e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e70:	415b      	adcs	r3, r3
 8003e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e78:	4641      	mov	r1, r8
 8003e7a:	eb12 0a01 	adds.w	sl, r2, r1
 8003e7e:	4649      	mov	r1, r9
 8003e80:	eb43 0b01 	adc.w	fp, r3, r1
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e98:	4692      	mov	sl, r2
 8003e9a:	469b      	mov	fp, r3
 8003e9c:	4643      	mov	r3, r8
 8003e9e:	eb1a 0303 	adds.w	r3, sl, r3
 8003ea2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ea6:	464b      	mov	r3, r9
 8003ea8:	eb4b 0303 	adc.w	r3, fp, r3
 8003eac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ebc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ec0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	18db      	adds	r3, r3, r3
 8003ec8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003eca:	4613      	mov	r3, r2
 8003ecc:	eb42 0303 	adc.w	r3, r2, r3
 8003ed0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ed2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ed6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003eda:	f7fc f9c9 	bl	8000270 <__aeabi_uldivmod>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	4b3b      	ldr	r3, [pc, #236]	@ (8003fd4 <UART_SetConfig+0x2d4>)
 8003ee6:	fba3 2301 	umull	r2, r3, r3, r1
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	2264      	movs	r2, #100	@ 0x64
 8003eee:	fb02 f303 	mul.w	r3, r2, r3
 8003ef2:	1acb      	subs	r3, r1, r3
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003efa:	4b36      	ldr	r3, [pc, #216]	@ (8003fd4 <UART_SetConfig+0x2d4>)
 8003efc:	fba3 2302 	umull	r2, r3, r3, r2
 8003f00:	095b      	lsrs	r3, r3, #5
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f08:	441c      	add	r4, r3
 8003f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f14:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f1c:	4642      	mov	r2, r8
 8003f1e:	464b      	mov	r3, r9
 8003f20:	1891      	adds	r1, r2, r2
 8003f22:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f24:	415b      	adcs	r3, r3
 8003f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f2c:	4641      	mov	r1, r8
 8003f2e:	1851      	adds	r1, r2, r1
 8003f30:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f32:	4649      	mov	r1, r9
 8003f34:	414b      	adcs	r3, r1
 8003f36:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f44:	4659      	mov	r1, fp
 8003f46:	00cb      	lsls	r3, r1, #3
 8003f48:	4651      	mov	r1, sl
 8003f4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f4e:	4651      	mov	r1, sl
 8003f50:	00ca      	lsls	r2, r1, #3
 8003f52:	4610      	mov	r0, r2
 8003f54:	4619      	mov	r1, r3
 8003f56:	4603      	mov	r3, r0
 8003f58:	4642      	mov	r2, r8
 8003f5a:	189b      	adds	r3, r3, r2
 8003f5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f60:	464b      	mov	r3, r9
 8003f62:	460a      	mov	r2, r1
 8003f64:	eb42 0303 	adc.w	r3, r2, r3
 8003f68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f78:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f80:	460b      	mov	r3, r1
 8003f82:	18db      	adds	r3, r3, r3
 8003f84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f86:	4613      	mov	r3, r2
 8003f88:	eb42 0303 	adc.w	r3, r2, r3
 8003f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f96:	f7fc f96b 	bl	8000270 <__aeabi_uldivmod>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fd4 <UART_SetConfig+0x2d4>)
 8003fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa4:	095b      	lsrs	r3, r3, #5
 8003fa6:	2164      	movs	r1, #100	@ 0x64
 8003fa8:	fb01 f303 	mul.w	r3, r1, r3
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	3332      	adds	r3, #50	@ 0x32
 8003fb2:	4a08      	ldr	r2, [pc, #32]	@ (8003fd4 <UART_SetConfig+0x2d4>)
 8003fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb8:	095b      	lsrs	r3, r3, #5
 8003fba:	f003 0207 	and.w	r2, r3, #7
 8003fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4422      	add	r2, r4
 8003fc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fc8:	e106      	b.n	80041d8 <UART_SetConfig+0x4d8>
 8003fca:	bf00      	nop
 8003fcc:	40011000 	.word	0x40011000
 8003fd0:	40011400 	.word	0x40011400
 8003fd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003fe2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003fe6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003fea:	4642      	mov	r2, r8
 8003fec:	464b      	mov	r3, r9
 8003fee:	1891      	adds	r1, r2, r2
 8003ff0:	6239      	str	r1, [r7, #32]
 8003ff2:	415b      	adcs	r3, r3
 8003ff4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ff6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ffa:	4641      	mov	r1, r8
 8003ffc:	1854      	adds	r4, r2, r1
 8003ffe:	4649      	mov	r1, r9
 8004000:	eb43 0501 	adc.w	r5, r3, r1
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	00eb      	lsls	r3, r5, #3
 800400e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004012:	00e2      	lsls	r2, r4, #3
 8004014:	4614      	mov	r4, r2
 8004016:	461d      	mov	r5, r3
 8004018:	4643      	mov	r3, r8
 800401a:	18e3      	adds	r3, r4, r3
 800401c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004020:	464b      	mov	r3, r9
 8004022:	eb45 0303 	adc.w	r3, r5, r3
 8004026:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800402a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004036:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800403a:	f04f 0200 	mov.w	r2, #0
 800403e:	f04f 0300 	mov.w	r3, #0
 8004042:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004046:	4629      	mov	r1, r5
 8004048:	008b      	lsls	r3, r1, #2
 800404a:	4621      	mov	r1, r4
 800404c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004050:	4621      	mov	r1, r4
 8004052:	008a      	lsls	r2, r1, #2
 8004054:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004058:	f7fc f90a 	bl	8000270 <__aeabi_uldivmod>
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	4b60      	ldr	r3, [pc, #384]	@ (80041e4 <UART_SetConfig+0x4e4>)
 8004062:	fba3 2302 	umull	r2, r3, r3, r2
 8004066:	095b      	lsrs	r3, r3, #5
 8004068:	011c      	lsls	r4, r3, #4
 800406a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800406e:	2200      	movs	r2, #0
 8004070:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004074:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004078:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800407c:	4642      	mov	r2, r8
 800407e:	464b      	mov	r3, r9
 8004080:	1891      	adds	r1, r2, r2
 8004082:	61b9      	str	r1, [r7, #24]
 8004084:	415b      	adcs	r3, r3
 8004086:	61fb      	str	r3, [r7, #28]
 8004088:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800408c:	4641      	mov	r1, r8
 800408e:	1851      	adds	r1, r2, r1
 8004090:	6139      	str	r1, [r7, #16]
 8004092:	4649      	mov	r1, r9
 8004094:	414b      	adcs	r3, r1
 8004096:	617b      	str	r3, [r7, #20]
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040a4:	4659      	mov	r1, fp
 80040a6:	00cb      	lsls	r3, r1, #3
 80040a8:	4651      	mov	r1, sl
 80040aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ae:	4651      	mov	r1, sl
 80040b0:	00ca      	lsls	r2, r1, #3
 80040b2:	4610      	mov	r0, r2
 80040b4:	4619      	mov	r1, r3
 80040b6:	4603      	mov	r3, r0
 80040b8:	4642      	mov	r2, r8
 80040ba:	189b      	adds	r3, r3, r2
 80040bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040c0:	464b      	mov	r3, r9
 80040c2:	460a      	mov	r2, r1
 80040c4:	eb42 0303 	adc.w	r3, r2, r3
 80040c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80040e4:	4649      	mov	r1, r9
 80040e6:	008b      	lsls	r3, r1, #2
 80040e8:	4641      	mov	r1, r8
 80040ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040ee:	4641      	mov	r1, r8
 80040f0:	008a      	lsls	r2, r1, #2
 80040f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80040f6:	f7fc f8bb 	bl	8000270 <__aeabi_uldivmod>
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
 80040fe:	4611      	mov	r1, r2
 8004100:	4b38      	ldr	r3, [pc, #224]	@ (80041e4 <UART_SetConfig+0x4e4>)
 8004102:	fba3 2301 	umull	r2, r3, r3, r1
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	2264      	movs	r2, #100	@ 0x64
 800410a:	fb02 f303 	mul.w	r3, r2, r3
 800410e:	1acb      	subs	r3, r1, r3
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	3332      	adds	r3, #50	@ 0x32
 8004114:	4a33      	ldr	r2, [pc, #204]	@ (80041e4 <UART_SetConfig+0x4e4>)
 8004116:	fba2 2303 	umull	r2, r3, r2, r3
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004120:	441c      	add	r4, r3
 8004122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004126:	2200      	movs	r2, #0
 8004128:	673b      	str	r3, [r7, #112]	@ 0x70
 800412a:	677a      	str	r2, [r7, #116]	@ 0x74
 800412c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004130:	4642      	mov	r2, r8
 8004132:	464b      	mov	r3, r9
 8004134:	1891      	adds	r1, r2, r2
 8004136:	60b9      	str	r1, [r7, #8]
 8004138:	415b      	adcs	r3, r3
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004140:	4641      	mov	r1, r8
 8004142:	1851      	adds	r1, r2, r1
 8004144:	6039      	str	r1, [r7, #0]
 8004146:	4649      	mov	r1, r9
 8004148:	414b      	adcs	r3, r1
 800414a:	607b      	str	r3, [r7, #4]
 800414c:	f04f 0200 	mov.w	r2, #0
 8004150:	f04f 0300 	mov.w	r3, #0
 8004154:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004158:	4659      	mov	r1, fp
 800415a:	00cb      	lsls	r3, r1, #3
 800415c:	4651      	mov	r1, sl
 800415e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004162:	4651      	mov	r1, sl
 8004164:	00ca      	lsls	r2, r1, #3
 8004166:	4610      	mov	r0, r2
 8004168:	4619      	mov	r1, r3
 800416a:	4603      	mov	r3, r0
 800416c:	4642      	mov	r2, r8
 800416e:	189b      	adds	r3, r3, r2
 8004170:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004172:	464b      	mov	r3, r9
 8004174:	460a      	mov	r2, r1
 8004176:	eb42 0303 	adc.w	r3, r2, r3
 800417a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800417c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	663b      	str	r3, [r7, #96]	@ 0x60
 8004186:	667a      	str	r2, [r7, #100]	@ 0x64
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004194:	4649      	mov	r1, r9
 8004196:	008b      	lsls	r3, r1, #2
 8004198:	4641      	mov	r1, r8
 800419a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800419e:	4641      	mov	r1, r8
 80041a0:	008a      	lsls	r2, r1, #2
 80041a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80041a6:	f7fc f863 	bl	8000270 <__aeabi_uldivmod>
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	4b0d      	ldr	r3, [pc, #52]	@ (80041e4 <UART_SetConfig+0x4e4>)
 80041b0:	fba3 1302 	umull	r1, r3, r3, r2
 80041b4:	095b      	lsrs	r3, r3, #5
 80041b6:	2164      	movs	r1, #100	@ 0x64
 80041b8:	fb01 f303 	mul.w	r3, r1, r3
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	3332      	adds	r3, #50	@ 0x32
 80041c2:	4a08      	ldr	r2, [pc, #32]	@ (80041e4 <UART_SetConfig+0x4e4>)
 80041c4:	fba2 2303 	umull	r2, r3, r2, r3
 80041c8:	095b      	lsrs	r3, r3, #5
 80041ca:	f003 020f 	and.w	r2, r3, #15
 80041ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4422      	add	r2, r4
 80041d6:	609a      	str	r2, [r3, #8]
}
 80041d8:	bf00      	nop
 80041da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80041de:	46bd      	mov	sp, r7
 80041e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041e4:	51eb851f 	.word	0x51eb851f

080041e8 <siprintf>:
 80041e8:	b40e      	push	{r1, r2, r3}
 80041ea:	b500      	push	{lr}
 80041ec:	b09c      	sub	sp, #112	@ 0x70
 80041ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80041f0:	9002      	str	r0, [sp, #8]
 80041f2:	9006      	str	r0, [sp, #24]
 80041f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80041f8:	4809      	ldr	r0, [pc, #36]	@ (8004220 <siprintf+0x38>)
 80041fa:	9107      	str	r1, [sp, #28]
 80041fc:	9104      	str	r1, [sp, #16]
 80041fe:	4909      	ldr	r1, [pc, #36]	@ (8004224 <siprintf+0x3c>)
 8004200:	f853 2b04 	ldr.w	r2, [r3], #4
 8004204:	9105      	str	r1, [sp, #20]
 8004206:	6800      	ldr	r0, [r0, #0]
 8004208:	9301      	str	r3, [sp, #4]
 800420a:	a902      	add	r1, sp, #8
 800420c:	f000 f994 	bl	8004538 <_svfiprintf_r>
 8004210:	9b02      	ldr	r3, [sp, #8]
 8004212:	2200      	movs	r2, #0
 8004214:	701a      	strb	r2, [r3, #0]
 8004216:	b01c      	add	sp, #112	@ 0x70
 8004218:	f85d eb04 	ldr.w	lr, [sp], #4
 800421c:	b003      	add	sp, #12
 800421e:	4770      	bx	lr
 8004220:	2000002c 	.word	0x2000002c
 8004224:	ffff0208 	.word	0xffff0208

08004228 <memset>:
 8004228:	4402      	add	r2, r0
 800422a:	4603      	mov	r3, r0
 800422c:	4293      	cmp	r3, r2
 800422e:	d100      	bne.n	8004232 <memset+0xa>
 8004230:	4770      	bx	lr
 8004232:	f803 1b01 	strb.w	r1, [r3], #1
 8004236:	e7f9      	b.n	800422c <memset+0x4>

08004238 <__errno>:
 8004238:	4b01      	ldr	r3, [pc, #4]	@ (8004240 <__errno+0x8>)
 800423a:	6818      	ldr	r0, [r3, #0]
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	2000002c 	.word	0x2000002c

08004244 <__libc_init_array>:
 8004244:	b570      	push	{r4, r5, r6, lr}
 8004246:	4d0d      	ldr	r5, [pc, #52]	@ (800427c <__libc_init_array+0x38>)
 8004248:	4c0d      	ldr	r4, [pc, #52]	@ (8004280 <__libc_init_array+0x3c>)
 800424a:	1b64      	subs	r4, r4, r5
 800424c:	10a4      	asrs	r4, r4, #2
 800424e:	2600      	movs	r6, #0
 8004250:	42a6      	cmp	r6, r4
 8004252:	d109      	bne.n	8004268 <__libc_init_array+0x24>
 8004254:	4d0b      	ldr	r5, [pc, #44]	@ (8004284 <__libc_init_array+0x40>)
 8004256:	4c0c      	ldr	r4, [pc, #48]	@ (8004288 <__libc_init_array+0x44>)
 8004258:	f000 fc66 	bl	8004b28 <_init>
 800425c:	1b64      	subs	r4, r4, r5
 800425e:	10a4      	asrs	r4, r4, #2
 8004260:	2600      	movs	r6, #0
 8004262:	42a6      	cmp	r6, r4
 8004264:	d105      	bne.n	8004272 <__libc_init_array+0x2e>
 8004266:	bd70      	pop	{r4, r5, r6, pc}
 8004268:	f855 3b04 	ldr.w	r3, [r5], #4
 800426c:	4798      	blx	r3
 800426e:	3601      	adds	r6, #1
 8004270:	e7ee      	b.n	8004250 <__libc_init_array+0xc>
 8004272:	f855 3b04 	ldr.w	r3, [r5], #4
 8004276:	4798      	blx	r3
 8004278:	3601      	adds	r6, #1
 800427a:	e7f2      	b.n	8004262 <__libc_init_array+0x1e>
 800427c:	08004c10 	.word	0x08004c10
 8004280:	08004c10 	.word	0x08004c10
 8004284:	08004c10 	.word	0x08004c10
 8004288:	08004c14 	.word	0x08004c14

0800428c <__retarget_lock_acquire_recursive>:
 800428c:	4770      	bx	lr

0800428e <__retarget_lock_release_recursive>:
 800428e:	4770      	bx	lr

08004290 <_free_r>:
 8004290:	b538      	push	{r3, r4, r5, lr}
 8004292:	4605      	mov	r5, r0
 8004294:	2900      	cmp	r1, #0
 8004296:	d041      	beq.n	800431c <_free_r+0x8c>
 8004298:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800429c:	1f0c      	subs	r4, r1, #4
 800429e:	2b00      	cmp	r3, #0
 80042a0:	bfb8      	it	lt
 80042a2:	18e4      	addlt	r4, r4, r3
 80042a4:	f000 f8e0 	bl	8004468 <__malloc_lock>
 80042a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004320 <_free_r+0x90>)
 80042aa:	6813      	ldr	r3, [r2, #0]
 80042ac:	b933      	cbnz	r3, 80042bc <_free_r+0x2c>
 80042ae:	6063      	str	r3, [r4, #4]
 80042b0:	6014      	str	r4, [r2, #0]
 80042b2:	4628      	mov	r0, r5
 80042b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042b8:	f000 b8dc 	b.w	8004474 <__malloc_unlock>
 80042bc:	42a3      	cmp	r3, r4
 80042be:	d908      	bls.n	80042d2 <_free_r+0x42>
 80042c0:	6820      	ldr	r0, [r4, #0]
 80042c2:	1821      	adds	r1, r4, r0
 80042c4:	428b      	cmp	r3, r1
 80042c6:	bf01      	itttt	eq
 80042c8:	6819      	ldreq	r1, [r3, #0]
 80042ca:	685b      	ldreq	r3, [r3, #4]
 80042cc:	1809      	addeq	r1, r1, r0
 80042ce:	6021      	streq	r1, [r4, #0]
 80042d0:	e7ed      	b.n	80042ae <_free_r+0x1e>
 80042d2:	461a      	mov	r2, r3
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	b10b      	cbz	r3, 80042dc <_free_r+0x4c>
 80042d8:	42a3      	cmp	r3, r4
 80042da:	d9fa      	bls.n	80042d2 <_free_r+0x42>
 80042dc:	6811      	ldr	r1, [r2, #0]
 80042de:	1850      	adds	r0, r2, r1
 80042e0:	42a0      	cmp	r0, r4
 80042e2:	d10b      	bne.n	80042fc <_free_r+0x6c>
 80042e4:	6820      	ldr	r0, [r4, #0]
 80042e6:	4401      	add	r1, r0
 80042e8:	1850      	adds	r0, r2, r1
 80042ea:	4283      	cmp	r3, r0
 80042ec:	6011      	str	r1, [r2, #0]
 80042ee:	d1e0      	bne.n	80042b2 <_free_r+0x22>
 80042f0:	6818      	ldr	r0, [r3, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	6053      	str	r3, [r2, #4]
 80042f6:	4408      	add	r0, r1
 80042f8:	6010      	str	r0, [r2, #0]
 80042fa:	e7da      	b.n	80042b2 <_free_r+0x22>
 80042fc:	d902      	bls.n	8004304 <_free_r+0x74>
 80042fe:	230c      	movs	r3, #12
 8004300:	602b      	str	r3, [r5, #0]
 8004302:	e7d6      	b.n	80042b2 <_free_r+0x22>
 8004304:	6820      	ldr	r0, [r4, #0]
 8004306:	1821      	adds	r1, r4, r0
 8004308:	428b      	cmp	r3, r1
 800430a:	bf04      	itt	eq
 800430c:	6819      	ldreq	r1, [r3, #0]
 800430e:	685b      	ldreq	r3, [r3, #4]
 8004310:	6063      	str	r3, [r4, #4]
 8004312:	bf04      	itt	eq
 8004314:	1809      	addeq	r1, r1, r0
 8004316:	6021      	streq	r1, [r4, #0]
 8004318:	6054      	str	r4, [r2, #4]
 800431a:	e7ca      	b.n	80042b2 <_free_r+0x22>
 800431c:	bd38      	pop	{r3, r4, r5, pc}
 800431e:	bf00      	nop
 8004320:	20001378 	.word	0x20001378

08004324 <sbrk_aligned>:
 8004324:	b570      	push	{r4, r5, r6, lr}
 8004326:	4e0f      	ldr	r6, [pc, #60]	@ (8004364 <sbrk_aligned+0x40>)
 8004328:	460c      	mov	r4, r1
 800432a:	6831      	ldr	r1, [r6, #0]
 800432c:	4605      	mov	r5, r0
 800432e:	b911      	cbnz	r1, 8004336 <sbrk_aligned+0x12>
 8004330:	f000 fba6 	bl	8004a80 <_sbrk_r>
 8004334:	6030      	str	r0, [r6, #0]
 8004336:	4621      	mov	r1, r4
 8004338:	4628      	mov	r0, r5
 800433a:	f000 fba1 	bl	8004a80 <_sbrk_r>
 800433e:	1c43      	adds	r3, r0, #1
 8004340:	d103      	bne.n	800434a <sbrk_aligned+0x26>
 8004342:	f04f 34ff 	mov.w	r4, #4294967295
 8004346:	4620      	mov	r0, r4
 8004348:	bd70      	pop	{r4, r5, r6, pc}
 800434a:	1cc4      	adds	r4, r0, #3
 800434c:	f024 0403 	bic.w	r4, r4, #3
 8004350:	42a0      	cmp	r0, r4
 8004352:	d0f8      	beq.n	8004346 <sbrk_aligned+0x22>
 8004354:	1a21      	subs	r1, r4, r0
 8004356:	4628      	mov	r0, r5
 8004358:	f000 fb92 	bl	8004a80 <_sbrk_r>
 800435c:	3001      	adds	r0, #1
 800435e:	d1f2      	bne.n	8004346 <sbrk_aligned+0x22>
 8004360:	e7ef      	b.n	8004342 <sbrk_aligned+0x1e>
 8004362:	bf00      	nop
 8004364:	20001374 	.word	0x20001374

08004368 <_malloc_r>:
 8004368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800436c:	1ccd      	adds	r5, r1, #3
 800436e:	f025 0503 	bic.w	r5, r5, #3
 8004372:	3508      	adds	r5, #8
 8004374:	2d0c      	cmp	r5, #12
 8004376:	bf38      	it	cc
 8004378:	250c      	movcc	r5, #12
 800437a:	2d00      	cmp	r5, #0
 800437c:	4606      	mov	r6, r0
 800437e:	db01      	blt.n	8004384 <_malloc_r+0x1c>
 8004380:	42a9      	cmp	r1, r5
 8004382:	d904      	bls.n	800438e <_malloc_r+0x26>
 8004384:	230c      	movs	r3, #12
 8004386:	6033      	str	r3, [r6, #0]
 8004388:	2000      	movs	r0, #0
 800438a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800438e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004464 <_malloc_r+0xfc>
 8004392:	f000 f869 	bl	8004468 <__malloc_lock>
 8004396:	f8d8 3000 	ldr.w	r3, [r8]
 800439a:	461c      	mov	r4, r3
 800439c:	bb44      	cbnz	r4, 80043f0 <_malloc_r+0x88>
 800439e:	4629      	mov	r1, r5
 80043a0:	4630      	mov	r0, r6
 80043a2:	f7ff ffbf 	bl	8004324 <sbrk_aligned>
 80043a6:	1c43      	adds	r3, r0, #1
 80043a8:	4604      	mov	r4, r0
 80043aa:	d158      	bne.n	800445e <_malloc_r+0xf6>
 80043ac:	f8d8 4000 	ldr.w	r4, [r8]
 80043b0:	4627      	mov	r7, r4
 80043b2:	2f00      	cmp	r7, #0
 80043b4:	d143      	bne.n	800443e <_malloc_r+0xd6>
 80043b6:	2c00      	cmp	r4, #0
 80043b8:	d04b      	beq.n	8004452 <_malloc_r+0xea>
 80043ba:	6823      	ldr	r3, [r4, #0]
 80043bc:	4639      	mov	r1, r7
 80043be:	4630      	mov	r0, r6
 80043c0:	eb04 0903 	add.w	r9, r4, r3
 80043c4:	f000 fb5c 	bl	8004a80 <_sbrk_r>
 80043c8:	4581      	cmp	r9, r0
 80043ca:	d142      	bne.n	8004452 <_malloc_r+0xea>
 80043cc:	6821      	ldr	r1, [r4, #0]
 80043ce:	1a6d      	subs	r5, r5, r1
 80043d0:	4629      	mov	r1, r5
 80043d2:	4630      	mov	r0, r6
 80043d4:	f7ff ffa6 	bl	8004324 <sbrk_aligned>
 80043d8:	3001      	adds	r0, #1
 80043da:	d03a      	beq.n	8004452 <_malloc_r+0xea>
 80043dc:	6823      	ldr	r3, [r4, #0]
 80043de:	442b      	add	r3, r5
 80043e0:	6023      	str	r3, [r4, #0]
 80043e2:	f8d8 3000 	ldr.w	r3, [r8]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	bb62      	cbnz	r2, 8004444 <_malloc_r+0xdc>
 80043ea:	f8c8 7000 	str.w	r7, [r8]
 80043ee:	e00f      	b.n	8004410 <_malloc_r+0xa8>
 80043f0:	6822      	ldr	r2, [r4, #0]
 80043f2:	1b52      	subs	r2, r2, r5
 80043f4:	d420      	bmi.n	8004438 <_malloc_r+0xd0>
 80043f6:	2a0b      	cmp	r2, #11
 80043f8:	d917      	bls.n	800442a <_malloc_r+0xc2>
 80043fa:	1961      	adds	r1, r4, r5
 80043fc:	42a3      	cmp	r3, r4
 80043fe:	6025      	str	r5, [r4, #0]
 8004400:	bf18      	it	ne
 8004402:	6059      	strne	r1, [r3, #4]
 8004404:	6863      	ldr	r3, [r4, #4]
 8004406:	bf08      	it	eq
 8004408:	f8c8 1000 	streq.w	r1, [r8]
 800440c:	5162      	str	r2, [r4, r5]
 800440e:	604b      	str	r3, [r1, #4]
 8004410:	4630      	mov	r0, r6
 8004412:	f000 f82f 	bl	8004474 <__malloc_unlock>
 8004416:	f104 000b 	add.w	r0, r4, #11
 800441a:	1d23      	adds	r3, r4, #4
 800441c:	f020 0007 	bic.w	r0, r0, #7
 8004420:	1ac2      	subs	r2, r0, r3
 8004422:	bf1c      	itt	ne
 8004424:	1a1b      	subne	r3, r3, r0
 8004426:	50a3      	strne	r3, [r4, r2]
 8004428:	e7af      	b.n	800438a <_malloc_r+0x22>
 800442a:	6862      	ldr	r2, [r4, #4]
 800442c:	42a3      	cmp	r3, r4
 800442e:	bf0c      	ite	eq
 8004430:	f8c8 2000 	streq.w	r2, [r8]
 8004434:	605a      	strne	r2, [r3, #4]
 8004436:	e7eb      	b.n	8004410 <_malloc_r+0xa8>
 8004438:	4623      	mov	r3, r4
 800443a:	6864      	ldr	r4, [r4, #4]
 800443c:	e7ae      	b.n	800439c <_malloc_r+0x34>
 800443e:	463c      	mov	r4, r7
 8004440:	687f      	ldr	r7, [r7, #4]
 8004442:	e7b6      	b.n	80043b2 <_malloc_r+0x4a>
 8004444:	461a      	mov	r2, r3
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	42a3      	cmp	r3, r4
 800444a:	d1fb      	bne.n	8004444 <_malloc_r+0xdc>
 800444c:	2300      	movs	r3, #0
 800444e:	6053      	str	r3, [r2, #4]
 8004450:	e7de      	b.n	8004410 <_malloc_r+0xa8>
 8004452:	230c      	movs	r3, #12
 8004454:	6033      	str	r3, [r6, #0]
 8004456:	4630      	mov	r0, r6
 8004458:	f000 f80c 	bl	8004474 <__malloc_unlock>
 800445c:	e794      	b.n	8004388 <_malloc_r+0x20>
 800445e:	6005      	str	r5, [r0, #0]
 8004460:	e7d6      	b.n	8004410 <_malloc_r+0xa8>
 8004462:	bf00      	nop
 8004464:	20001378 	.word	0x20001378

08004468 <__malloc_lock>:
 8004468:	4801      	ldr	r0, [pc, #4]	@ (8004470 <__malloc_lock+0x8>)
 800446a:	f7ff bf0f 	b.w	800428c <__retarget_lock_acquire_recursive>
 800446e:	bf00      	nop
 8004470:	20001370 	.word	0x20001370

08004474 <__malloc_unlock>:
 8004474:	4801      	ldr	r0, [pc, #4]	@ (800447c <__malloc_unlock+0x8>)
 8004476:	f7ff bf0a 	b.w	800428e <__retarget_lock_release_recursive>
 800447a:	bf00      	nop
 800447c:	20001370 	.word	0x20001370

08004480 <__ssputs_r>:
 8004480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004484:	688e      	ldr	r6, [r1, #8]
 8004486:	461f      	mov	r7, r3
 8004488:	42be      	cmp	r6, r7
 800448a:	680b      	ldr	r3, [r1, #0]
 800448c:	4682      	mov	sl, r0
 800448e:	460c      	mov	r4, r1
 8004490:	4690      	mov	r8, r2
 8004492:	d82d      	bhi.n	80044f0 <__ssputs_r+0x70>
 8004494:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004498:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800449c:	d026      	beq.n	80044ec <__ssputs_r+0x6c>
 800449e:	6965      	ldr	r5, [r4, #20]
 80044a0:	6909      	ldr	r1, [r1, #16]
 80044a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044a6:	eba3 0901 	sub.w	r9, r3, r1
 80044aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044ae:	1c7b      	adds	r3, r7, #1
 80044b0:	444b      	add	r3, r9
 80044b2:	106d      	asrs	r5, r5, #1
 80044b4:	429d      	cmp	r5, r3
 80044b6:	bf38      	it	cc
 80044b8:	461d      	movcc	r5, r3
 80044ba:	0553      	lsls	r3, r2, #21
 80044bc:	d527      	bpl.n	800450e <__ssputs_r+0x8e>
 80044be:	4629      	mov	r1, r5
 80044c0:	f7ff ff52 	bl	8004368 <_malloc_r>
 80044c4:	4606      	mov	r6, r0
 80044c6:	b360      	cbz	r0, 8004522 <__ssputs_r+0xa2>
 80044c8:	6921      	ldr	r1, [r4, #16]
 80044ca:	464a      	mov	r2, r9
 80044cc:	f000 fae8 	bl	8004aa0 <memcpy>
 80044d0:	89a3      	ldrh	r3, [r4, #12]
 80044d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80044d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044da:	81a3      	strh	r3, [r4, #12]
 80044dc:	6126      	str	r6, [r4, #16]
 80044de:	6165      	str	r5, [r4, #20]
 80044e0:	444e      	add	r6, r9
 80044e2:	eba5 0509 	sub.w	r5, r5, r9
 80044e6:	6026      	str	r6, [r4, #0]
 80044e8:	60a5      	str	r5, [r4, #8]
 80044ea:	463e      	mov	r6, r7
 80044ec:	42be      	cmp	r6, r7
 80044ee:	d900      	bls.n	80044f2 <__ssputs_r+0x72>
 80044f0:	463e      	mov	r6, r7
 80044f2:	6820      	ldr	r0, [r4, #0]
 80044f4:	4632      	mov	r2, r6
 80044f6:	4641      	mov	r1, r8
 80044f8:	f000 faa8 	bl	8004a4c <memmove>
 80044fc:	68a3      	ldr	r3, [r4, #8]
 80044fe:	1b9b      	subs	r3, r3, r6
 8004500:	60a3      	str	r3, [r4, #8]
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	4433      	add	r3, r6
 8004506:	6023      	str	r3, [r4, #0]
 8004508:	2000      	movs	r0, #0
 800450a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800450e:	462a      	mov	r2, r5
 8004510:	f000 fad4 	bl	8004abc <_realloc_r>
 8004514:	4606      	mov	r6, r0
 8004516:	2800      	cmp	r0, #0
 8004518:	d1e0      	bne.n	80044dc <__ssputs_r+0x5c>
 800451a:	6921      	ldr	r1, [r4, #16]
 800451c:	4650      	mov	r0, sl
 800451e:	f7ff feb7 	bl	8004290 <_free_r>
 8004522:	230c      	movs	r3, #12
 8004524:	f8ca 3000 	str.w	r3, [sl]
 8004528:	89a3      	ldrh	r3, [r4, #12]
 800452a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800452e:	81a3      	strh	r3, [r4, #12]
 8004530:	f04f 30ff 	mov.w	r0, #4294967295
 8004534:	e7e9      	b.n	800450a <__ssputs_r+0x8a>
	...

08004538 <_svfiprintf_r>:
 8004538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800453c:	4698      	mov	r8, r3
 800453e:	898b      	ldrh	r3, [r1, #12]
 8004540:	061b      	lsls	r3, r3, #24
 8004542:	b09d      	sub	sp, #116	@ 0x74
 8004544:	4607      	mov	r7, r0
 8004546:	460d      	mov	r5, r1
 8004548:	4614      	mov	r4, r2
 800454a:	d510      	bpl.n	800456e <_svfiprintf_r+0x36>
 800454c:	690b      	ldr	r3, [r1, #16]
 800454e:	b973      	cbnz	r3, 800456e <_svfiprintf_r+0x36>
 8004550:	2140      	movs	r1, #64	@ 0x40
 8004552:	f7ff ff09 	bl	8004368 <_malloc_r>
 8004556:	6028      	str	r0, [r5, #0]
 8004558:	6128      	str	r0, [r5, #16]
 800455a:	b930      	cbnz	r0, 800456a <_svfiprintf_r+0x32>
 800455c:	230c      	movs	r3, #12
 800455e:	603b      	str	r3, [r7, #0]
 8004560:	f04f 30ff 	mov.w	r0, #4294967295
 8004564:	b01d      	add	sp, #116	@ 0x74
 8004566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800456a:	2340      	movs	r3, #64	@ 0x40
 800456c:	616b      	str	r3, [r5, #20]
 800456e:	2300      	movs	r3, #0
 8004570:	9309      	str	r3, [sp, #36]	@ 0x24
 8004572:	2320      	movs	r3, #32
 8004574:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004578:	f8cd 800c 	str.w	r8, [sp, #12]
 800457c:	2330      	movs	r3, #48	@ 0x30
 800457e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800471c <_svfiprintf_r+0x1e4>
 8004582:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004586:	f04f 0901 	mov.w	r9, #1
 800458a:	4623      	mov	r3, r4
 800458c:	469a      	mov	sl, r3
 800458e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004592:	b10a      	cbz	r2, 8004598 <_svfiprintf_r+0x60>
 8004594:	2a25      	cmp	r2, #37	@ 0x25
 8004596:	d1f9      	bne.n	800458c <_svfiprintf_r+0x54>
 8004598:	ebba 0b04 	subs.w	fp, sl, r4
 800459c:	d00b      	beq.n	80045b6 <_svfiprintf_r+0x7e>
 800459e:	465b      	mov	r3, fp
 80045a0:	4622      	mov	r2, r4
 80045a2:	4629      	mov	r1, r5
 80045a4:	4638      	mov	r0, r7
 80045a6:	f7ff ff6b 	bl	8004480 <__ssputs_r>
 80045aa:	3001      	adds	r0, #1
 80045ac:	f000 80a7 	beq.w	80046fe <_svfiprintf_r+0x1c6>
 80045b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045b2:	445a      	add	r2, fp
 80045b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80045b6:	f89a 3000 	ldrb.w	r3, [sl]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 809f 	beq.w	80046fe <_svfiprintf_r+0x1c6>
 80045c0:	2300      	movs	r3, #0
 80045c2:	f04f 32ff 	mov.w	r2, #4294967295
 80045c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045ca:	f10a 0a01 	add.w	sl, sl, #1
 80045ce:	9304      	str	r3, [sp, #16]
 80045d0:	9307      	str	r3, [sp, #28]
 80045d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80045d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80045d8:	4654      	mov	r4, sl
 80045da:	2205      	movs	r2, #5
 80045dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045e0:	484e      	ldr	r0, [pc, #312]	@ (800471c <_svfiprintf_r+0x1e4>)
 80045e2:	f7fb fdf5 	bl	80001d0 <memchr>
 80045e6:	9a04      	ldr	r2, [sp, #16]
 80045e8:	b9d8      	cbnz	r0, 8004622 <_svfiprintf_r+0xea>
 80045ea:	06d0      	lsls	r0, r2, #27
 80045ec:	bf44      	itt	mi
 80045ee:	2320      	movmi	r3, #32
 80045f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045f4:	0711      	lsls	r1, r2, #28
 80045f6:	bf44      	itt	mi
 80045f8:	232b      	movmi	r3, #43	@ 0x2b
 80045fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004602:	2b2a      	cmp	r3, #42	@ 0x2a
 8004604:	d015      	beq.n	8004632 <_svfiprintf_r+0xfa>
 8004606:	9a07      	ldr	r2, [sp, #28]
 8004608:	4654      	mov	r4, sl
 800460a:	2000      	movs	r0, #0
 800460c:	f04f 0c0a 	mov.w	ip, #10
 8004610:	4621      	mov	r1, r4
 8004612:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004616:	3b30      	subs	r3, #48	@ 0x30
 8004618:	2b09      	cmp	r3, #9
 800461a:	d94b      	bls.n	80046b4 <_svfiprintf_r+0x17c>
 800461c:	b1b0      	cbz	r0, 800464c <_svfiprintf_r+0x114>
 800461e:	9207      	str	r2, [sp, #28]
 8004620:	e014      	b.n	800464c <_svfiprintf_r+0x114>
 8004622:	eba0 0308 	sub.w	r3, r0, r8
 8004626:	fa09 f303 	lsl.w	r3, r9, r3
 800462a:	4313      	orrs	r3, r2
 800462c:	9304      	str	r3, [sp, #16]
 800462e:	46a2      	mov	sl, r4
 8004630:	e7d2      	b.n	80045d8 <_svfiprintf_r+0xa0>
 8004632:	9b03      	ldr	r3, [sp, #12]
 8004634:	1d19      	adds	r1, r3, #4
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	9103      	str	r1, [sp, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	bfbb      	ittet	lt
 800463e:	425b      	neglt	r3, r3
 8004640:	f042 0202 	orrlt.w	r2, r2, #2
 8004644:	9307      	strge	r3, [sp, #28]
 8004646:	9307      	strlt	r3, [sp, #28]
 8004648:	bfb8      	it	lt
 800464a:	9204      	strlt	r2, [sp, #16]
 800464c:	7823      	ldrb	r3, [r4, #0]
 800464e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004650:	d10a      	bne.n	8004668 <_svfiprintf_r+0x130>
 8004652:	7863      	ldrb	r3, [r4, #1]
 8004654:	2b2a      	cmp	r3, #42	@ 0x2a
 8004656:	d132      	bne.n	80046be <_svfiprintf_r+0x186>
 8004658:	9b03      	ldr	r3, [sp, #12]
 800465a:	1d1a      	adds	r2, r3, #4
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	9203      	str	r2, [sp, #12]
 8004660:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004664:	3402      	adds	r4, #2
 8004666:	9305      	str	r3, [sp, #20]
 8004668:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800472c <_svfiprintf_r+0x1f4>
 800466c:	7821      	ldrb	r1, [r4, #0]
 800466e:	2203      	movs	r2, #3
 8004670:	4650      	mov	r0, sl
 8004672:	f7fb fdad 	bl	80001d0 <memchr>
 8004676:	b138      	cbz	r0, 8004688 <_svfiprintf_r+0x150>
 8004678:	9b04      	ldr	r3, [sp, #16]
 800467a:	eba0 000a 	sub.w	r0, r0, sl
 800467e:	2240      	movs	r2, #64	@ 0x40
 8004680:	4082      	lsls	r2, r0
 8004682:	4313      	orrs	r3, r2
 8004684:	3401      	adds	r4, #1
 8004686:	9304      	str	r3, [sp, #16]
 8004688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800468c:	4824      	ldr	r0, [pc, #144]	@ (8004720 <_svfiprintf_r+0x1e8>)
 800468e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004692:	2206      	movs	r2, #6
 8004694:	f7fb fd9c 	bl	80001d0 <memchr>
 8004698:	2800      	cmp	r0, #0
 800469a:	d036      	beq.n	800470a <_svfiprintf_r+0x1d2>
 800469c:	4b21      	ldr	r3, [pc, #132]	@ (8004724 <_svfiprintf_r+0x1ec>)
 800469e:	bb1b      	cbnz	r3, 80046e8 <_svfiprintf_r+0x1b0>
 80046a0:	9b03      	ldr	r3, [sp, #12]
 80046a2:	3307      	adds	r3, #7
 80046a4:	f023 0307 	bic.w	r3, r3, #7
 80046a8:	3308      	adds	r3, #8
 80046aa:	9303      	str	r3, [sp, #12]
 80046ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046ae:	4433      	add	r3, r6
 80046b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80046b2:	e76a      	b.n	800458a <_svfiprintf_r+0x52>
 80046b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80046b8:	460c      	mov	r4, r1
 80046ba:	2001      	movs	r0, #1
 80046bc:	e7a8      	b.n	8004610 <_svfiprintf_r+0xd8>
 80046be:	2300      	movs	r3, #0
 80046c0:	3401      	adds	r4, #1
 80046c2:	9305      	str	r3, [sp, #20]
 80046c4:	4619      	mov	r1, r3
 80046c6:	f04f 0c0a 	mov.w	ip, #10
 80046ca:	4620      	mov	r0, r4
 80046cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046d0:	3a30      	subs	r2, #48	@ 0x30
 80046d2:	2a09      	cmp	r2, #9
 80046d4:	d903      	bls.n	80046de <_svfiprintf_r+0x1a6>
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d0c6      	beq.n	8004668 <_svfiprintf_r+0x130>
 80046da:	9105      	str	r1, [sp, #20]
 80046dc:	e7c4      	b.n	8004668 <_svfiprintf_r+0x130>
 80046de:	fb0c 2101 	mla	r1, ip, r1, r2
 80046e2:	4604      	mov	r4, r0
 80046e4:	2301      	movs	r3, #1
 80046e6:	e7f0      	b.n	80046ca <_svfiprintf_r+0x192>
 80046e8:	ab03      	add	r3, sp, #12
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	462a      	mov	r2, r5
 80046ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004728 <_svfiprintf_r+0x1f0>)
 80046f0:	a904      	add	r1, sp, #16
 80046f2:	4638      	mov	r0, r7
 80046f4:	f3af 8000 	nop.w
 80046f8:	1c42      	adds	r2, r0, #1
 80046fa:	4606      	mov	r6, r0
 80046fc:	d1d6      	bne.n	80046ac <_svfiprintf_r+0x174>
 80046fe:	89ab      	ldrh	r3, [r5, #12]
 8004700:	065b      	lsls	r3, r3, #25
 8004702:	f53f af2d 	bmi.w	8004560 <_svfiprintf_r+0x28>
 8004706:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004708:	e72c      	b.n	8004564 <_svfiprintf_r+0x2c>
 800470a:	ab03      	add	r3, sp, #12
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	462a      	mov	r2, r5
 8004710:	4b05      	ldr	r3, [pc, #20]	@ (8004728 <_svfiprintf_r+0x1f0>)
 8004712:	a904      	add	r1, sp, #16
 8004714:	4638      	mov	r0, r7
 8004716:	f000 f879 	bl	800480c <_printf_i>
 800471a:	e7ed      	b.n	80046f8 <_svfiprintf_r+0x1c0>
 800471c:	08004bd4 	.word	0x08004bd4
 8004720:	08004bde 	.word	0x08004bde
 8004724:	00000000 	.word	0x00000000
 8004728:	08004481 	.word	0x08004481
 800472c:	08004bda 	.word	0x08004bda

08004730 <_printf_common>:
 8004730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004734:	4616      	mov	r6, r2
 8004736:	4698      	mov	r8, r3
 8004738:	688a      	ldr	r2, [r1, #8]
 800473a:	690b      	ldr	r3, [r1, #16]
 800473c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004740:	4293      	cmp	r3, r2
 8004742:	bfb8      	it	lt
 8004744:	4613      	movlt	r3, r2
 8004746:	6033      	str	r3, [r6, #0]
 8004748:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800474c:	4607      	mov	r7, r0
 800474e:	460c      	mov	r4, r1
 8004750:	b10a      	cbz	r2, 8004756 <_printf_common+0x26>
 8004752:	3301      	adds	r3, #1
 8004754:	6033      	str	r3, [r6, #0]
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	0699      	lsls	r1, r3, #26
 800475a:	bf42      	ittt	mi
 800475c:	6833      	ldrmi	r3, [r6, #0]
 800475e:	3302      	addmi	r3, #2
 8004760:	6033      	strmi	r3, [r6, #0]
 8004762:	6825      	ldr	r5, [r4, #0]
 8004764:	f015 0506 	ands.w	r5, r5, #6
 8004768:	d106      	bne.n	8004778 <_printf_common+0x48>
 800476a:	f104 0a19 	add.w	sl, r4, #25
 800476e:	68e3      	ldr	r3, [r4, #12]
 8004770:	6832      	ldr	r2, [r6, #0]
 8004772:	1a9b      	subs	r3, r3, r2
 8004774:	42ab      	cmp	r3, r5
 8004776:	dc26      	bgt.n	80047c6 <_printf_common+0x96>
 8004778:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800477c:	6822      	ldr	r2, [r4, #0]
 800477e:	3b00      	subs	r3, #0
 8004780:	bf18      	it	ne
 8004782:	2301      	movne	r3, #1
 8004784:	0692      	lsls	r2, r2, #26
 8004786:	d42b      	bmi.n	80047e0 <_printf_common+0xb0>
 8004788:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800478c:	4641      	mov	r1, r8
 800478e:	4638      	mov	r0, r7
 8004790:	47c8      	blx	r9
 8004792:	3001      	adds	r0, #1
 8004794:	d01e      	beq.n	80047d4 <_printf_common+0xa4>
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	6922      	ldr	r2, [r4, #16]
 800479a:	f003 0306 	and.w	r3, r3, #6
 800479e:	2b04      	cmp	r3, #4
 80047a0:	bf02      	ittt	eq
 80047a2:	68e5      	ldreq	r5, [r4, #12]
 80047a4:	6833      	ldreq	r3, [r6, #0]
 80047a6:	1aed      	subeq	r5, r5, r3
 80047a8:	68a3      	ldr	r3, [r4, #8]
 80047aa:	bf0c      	ite	eq
 80047ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047b0:	2500      	movne	r5, #0
 80047b2:	4293      	cmp	r3, r2
 80047b4:	bfc4      	itt	gt
 80047b6:	1a9b      	subgt	r3, r3, r2
 80047b8:	18ed      	addgt	r5, r5, r3
 80047ba:	2600      	movs	r6, #0
 80047bc:	341a      	adds	r4, #26
 80047be:	42b5      	cmp	r5, r6
 80047c0:	d11a      	bne.n	80047f8 <_printf_common+0xc8>
 80047c2:	2000      	movs	r0, #0
 80047c4:	e008      	b.n	80047d8 <_printf_common+0xa8>
 80047c6:	2301      	movs	r3, #1
 80047c8:	4652      	mov	r2, sl
 80047ca:	4641      	mov	r1, r8
 80047cc:	4638      	mov	r0, r7
 80047ce:	47c8      	blx	r9
 80047d0:	3001      	adds	r0, #1
 80047d2:	d103      	bne.n	80047dc <_printf_common+0xac>
 80047d4:	f04f 30ff 	mov.w	r0, #4294967295
 80047d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047dc:	3501      	adds	r5, #1
 80047de:	e7c6      	b.n	800476e <_printf_common+0x3e>
 80047e0:	18e1      	adds	r1, r4, r3
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	2030      	movs	r0, #48	@ 0x30
 80047e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80047ea:	4422      	add	r2, r4
 80047ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80047f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80047f4:	3302      	adds	r3, #2
 80047f6:	e7c7      	b.n	8004788 <_printf_common+0x58>
 80047f8:	2301      	movs	r3, #1
 80047fa:	4622      	mov	r2, r4
 80047fc:	4641      	mov	r1, r8
 80047fe:	4638      	mov	r0, r7
 8004800:	47c8      	blx	r9
 8004802:	3001      	adds	r0, #1
 8004804:	d0e6      	beq.n	80047d4 <_printf_common+0xa4>
 8004806:	3601      	adds	r6, #1
 8004808:	e7d9      	b.n	80047be <_printf_common+0x8e>
	...

0800480c <_printf_i>:
 800480c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004810:	7e0f      	ldrb	r7, [r1, #24]
 8004812:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004814:	2f78      	cmp	r7, #120	@ 0x78
 8004816:	4691      	mov	r9, r2
 8004818:	4680      	mov	r8, r0
 800481a:	460c      	mov	r4, r1
 800481c:	469a      	mov	sl, r3
 800481e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004822:	d807      	bhi.n	8004834 <_printf_i+0x28>
 8004824:	2f62      	cmp	r7, #98	@ 0x62
 8004826:	d80a      	bhi.n	800483e <_printf_i+0x32>
 8004828:	2f00      	cmp	r7, #0
 800482a:	f000 80d2 	beq.w	80049d2 <_printf_i+0x1c6>
 800482e:	2f58      	cmp	r7, #88	@ 0x58
 8004830:	f000 80b9 	beq.w	80049a6 <_printf_i+0x19a>
 8004834:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004838:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800483c:	e03a      	b.n	80048b4 <_printf_i+0xa8>
 800483e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004842:	2b15      	cmp	r3, #21
 8004844:	d8f6      	bhi.n	8004834 <_printf_i+0x28>
 8004846:	a101      	add	r1, pc, #4	@ (adr r1, 800484c <_printf_i+0x40>)
 8004848:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800484c:	080048a5 	.word	0x080048a5
 8004850:	080048b9 	.word	0x080048b9
 8004854:	08004835 	.word	0x08004835
 8004858:	08004835 	.word	0x08004835
 800485c:	08004835 	.word	0x08004835
 8004860:	08004835 	.word	0x08004835
 8004864:	080048b9 	.word	0x080048b9
 8004868:	08004835 	.word	0x08004835
 800486c:	08004835 	.word	0x08004835
 8004870:	08004835 	.word	0x08004835
 8004874:	08004835 	.word	0x08004835
 8004878:	080049b9 	.word	0x080049b9
 800487c:	080048e3 	.word	0x080048e3
 8004880:	08004973 	.word	0x08004973
 8004884:	08004835 	.word	0x08004835
 8004888:	08004835 	.word	0x08004835
 800488c:	080049db 	.word	0x080049db
 8004890:	08004835 	.word	0x08004835
 8004894:	080048e3 	.word	0x080048e3
 8004898:	08004835 	.word	0x08004835
 800489c:	08004835 	.word	0x08004835
 80048a0:	0800497b 	.word	0x0800497b
 80048a4:	6833      	ldr	r3, [r6, #0]
 80048a6:	1d1a      	adds	r2, r3, #4
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6032      	str	r2, [r6, #0]
 80048ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80048b4:	2301      	movs	r3, #1
 80048b6:	e09d      	b.n	80049f4 <_printf_i+0x1e8>
 80048b8:	6833      	ldr	r3, [r6, #0]
 80048ba:	6820      	ldr	r0, [r4, #0]
 80048bc:	1d19      	adds	r1, r3, #4
 80048be:	6031      	str	r1, [r6, #0]
 80048c0:	0606      	lsls	r6, r0, #24
 80048c2:	d501      	bpl.n	80048c8 <_printf_i+0xbc>
 80048c4:	681d      	ldr	r5, [r3, #0]
 80048c6:	e003      	b.n	80048d0 <_printf_i+0xc4>
 80048c8:	0645      	lsls	r5, r0, #25
 80048ca:	d5fb      	bpl.n	80048c4 <_printf_i+0xb8>
 80048cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80048d0:	2d00      	cmp	r5, #0
 80048d2:	da03      	bge.n	80048dc <_printf_i+0xd0>
 80048d4:	232d      	movs	r3, #45	@ 0x2d
 80048d6:	426d      	negs	r5, r5
 80048d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048dc:	4859      	ldr	r0, [pc, #356]	@ (8004a44 <_printf_i+0x238>)
 80048de:	230a      	movs	r3, #10
 80048e0:	e011      	b.n	8004906 <_printf_i+0xfa>
 80048e2:	6821      	ldr	r1, [r4, #0]
 80048e4:	6833      	ldr	r3, [r6, #0]
 80048e6:	0608      	lsls	r0, r1, #24
 80048e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80048ec:	d402      	bmi.n	80048f4 <_printf_i+0xe8>
 80048ee:	0649      	lsls	r1, r1, #25
 80048f0:	bf48      	it	mi
 80048f2:	b2ad      	uxthmi	r5, r5
 80048f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80048f6:	4853      	ldr	r0, [pc, #332]	@ (8004a44 <_printf_i+0x238>)
 80048f8:	6033      	str	r3, [r6, #0]
 80048fa:	bf14      	ite	ne
 80048fc:	230a      	movne	r3, #10
 80048fe:	2308      	moveq	r3, #8
 8004900:	2100      	movs	r1, #0
 8004902:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004906:	6866      	ldr	r6, [r4, #4]
 8004908:	60a6      	str	r6, [r4, #8]
 800490a:	2e00      	cmp	r6, #0
 800490c:	bfa2      	ittt	ge
 800490e:	6821      	ldrge	r1, [r4, #0]
 8004910:	f021 0104 	bicge.w	r1, r1, #4
 8004914:	6021      	strge	r1, [r4, #0]
 8004916:	b90d      	cbnz	r5, 800491c <_printf_i+0x110>
 8004918:	2e00      	cmp	r6, #0
 800491a:	d04b      	beq.n	80049b4 <_printf_i+0x1a8>
 800491c:	4616      	mov	r6, r2
 800491e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004922:	fb03 5711 	mls	r7, r3, r1, r5
 8004926:	5dc7      	ldrb	r7, [r0, r7]
 8004928:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800492c:	462f      	mov	r7, r5
 800492e:	42bb      	cmp	r3, r7
 8004930:	460d      	mov	r5, r1
 8004932:	d9f4      	bls.n	800491e <_printf_i+0x112>
 8004934:	2b08      	cmp	r3, #8
 8004936:	d10b      	bne.n	8004950 <_printf_i+0x144>
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	07df      	lsls	r7, r3, #31
 800493c:	d508      	bpl.n	8004950 <_printf_i+0x144>
 800493e:	6923      	ldr	r3, [r4, #16]
 8004940:	6861      	ldr	r1, [r4, #4]
 8004942:	4299      	cmp	r1, r3
 8004944:	bfde      	ittt	le
 8004946:	2330      	movle	r3, #48	@ 0x30
 8004948:	f806 3c01 	strble.w	r3, [r6, #-1]
 800494c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004950:	1b92      	subs	r2, r2, r6
 8004952:	6122      	str	r2, [r4, #16]
 8004954:	f8cd a000 	str.w	sl, [sp]
 8004958:	464b      	mov	r3, r9
 800495a:	aa03      	add	r2, sp, #12
 800495c:	4621      	mov	r1, r4
 800495e:	4640      	mov	r0, r8
 8004960:	f7ff fee6 	bl	8004730 <_printf_common>
 8004964:	3001      	adds	r0, #1
 8004966:	d14a      	bne.n	80049fe <_printf_i+0x1f2>
 8004968:	f04f 30ff 	mov.w	r0, #4294967295
 800496c:	b004      	add	sp, #16
 800496e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	f043 0320 	orr.w	r3, r3, #32
 8004978:	6023      	str	r3, [r4, #0]
 800497a:	4833      	ldr	r0, [pc, #204]	@ (8004a48 <_printf_i+0x23c>)
 800497c:	2778      	movs	r7, #120	@ 0x78
 800497e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004982:	6823      	ldr	r3, [r4, #0]
 8004984:	6831      	ldr	r1, [r6, #0]
 8004986:	061f      	lsls	r7, r3, #24
 8004988:	f851 5b04 	ldr.w	r5, [r1], #4
 800498c:	d402      	bmi.n	8004994 <_printf_i+0x188>
 800498e:	065f      	lsls	r7, r3, #25
 8004990:	bf48      	it	mi
 8004992:	b2ad      	uxthmi	r5, r5
 8004994:	6031      	str	r1, [r6, #0]
 8004996:	07d9      	lsls	r1, r3, #31
 8004998:	bf44      	itt	mi
 800499a:	f043 0320 	orrmi.w	r3, r3, #32
 800499e:	6023      	strmi	r3, [r4, #0]
 80049a0:	b11d      	cbz	r5, 80049aa <_printf_i+0x19e>
 80049a2:	2310      	movs	r3, #16
 80049a4:	e7ac      	b.n	8004900 <_printf_i+0xf4>
 80049a6:	4827      	ldr	r0, [pc, #156]	@ (8004a44 <_printf_i+0x238>)
 80049a8:	e7e9      	b.n	800497e <_printf_i+0x172>
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	f023 0320 	bic.w	r3, r3, #32
 80049b0:	6023      	str	r3, [r4, #0]
 80049b2:	e7f6      	b.n	80049a2 <_printf_i+0x196>
 80049b4:	4616      	mov	r6, r2
 80049b6:	e7bd      	b.n	8004934 <_printf_i+0x128>
 80049b8:	6833      	ldr	r3, [r6, #0]
 80049ba:	6825      	ldr	r5, [r4, #0]
 80049bc:	6961      	ldr	r1, [r4, #20]
 80049be:	1d18      	adds	r0, r3, #4
 80049c0:	6030      	str	r0, [r6, #0]
 80049c2:	062e      	lsls	r6, r5, #24
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	d501      	bpl.n	80049cc <_printf_i+0x1c0>
 80049c8:	6019      	str	r1, [r3, #0]
 80049ca:	e002      	b.n	80049d2 <_printf_i+0x1c6>
 80049cc:	0668      	lsls	r0, r5, #25
 80049ce:	d5fb      	bpl.n	80049c8 <_printf_i+0x1bc>
 80049d0:	8019      	strh	r1, [r3, #0]
 80049d2:	2300      	movs	r3, #0
 80049d4:	6123      	str	r3, [r4, #16]
 80049d6:	4616      	mov	r6, r2
 80049d8:	e7bc      	b.n	8004954 <_printf_i+0x148>
 80049da:	6833      	ldr	r3, [r6, #0]
 80049dc:	1d1a      	adds	r2, r3, #4
 80049de:	6032      	str	r2, [r6, #0]
 80049e0:	681e      	ldr	r6, [r3, #0]
 80049e2:	6862      	ldr	r2, [r4, #4]
 80049e4:	2100      	movs	r1, #0
 80049e6:	4630      	mov	r0, r6
 80049e8:	f7fb fbf2 	bl	80001d0 <memchr>
 80049ec:	b108      	cbz	r0, 80049f2 <_printf_i+0x1e6>
 80049ee:	1b80      	subs	r0, r0, r6
 80049f0:	6060      	str	r0, [r4, #4]
 80049f2:	6863      	ldr	r3, [r4, #4]
 80049f4:	6123      	str	r3, [r4, #16]
 80049f6:	2300      	movs	r3, #0
 80049f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049fc:	e7aa      	b.n	8004954 <_printf_i+0x148>
 80049fe:	6923      	ldr	r3, [r4, #16]
 8004a00:	4632      	mov	r2, r6
 8004a02:	4649      	mov	r1, r9
 8004a04:	4640      	mov	r0, r8
 8004a06:	47d0      	blx	sl
 8004a08:	3001      	adds	r0, #1
 8004a0a:	d0ad      	beq.n	8004968 <_printf_i+0x15c>
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	079b      	lsls	r3, r3, #30
 8004a10:	d413      	bmi.n	8004a3a <_printf_i+0x22e>
 8004a12:	68e0      	ldr	r0, [r4, #12]
 8004a14:	9b03      	ldr	r3, [sp, #12]
 8004a16:	4298      	cmp	r0, r3
 8004a18:	bfb8      	it	lt
 8004a1a:	4618      	movlt	r0, r3
 8004a1c:	e7a6      	b.n	800496c <_printf_i+0x160>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	4632      	mov	r2, r6
 8004a22:	4649      	mov	r1, r9
 8004a24:	4640      	mov	r0, r8
 8004a26:	47d0      	blx	sl
 8004a28:	3001      	adds	r0, #1
 8004a2a:	d09d      	beq.n	8004968 <_printf_i+0x15c>
 8004a2c:	3501      	adds	r5, #1
 8004a2e:	68e3      	ldr	r3, [r4, #12]
 8004a30:	9903      	ldr	r1, [sp, #12]
 8004a32:	1a5b      	subs	r3, r3, r1
 8004a34:	42ab      	cmp	r3, r5
 8004a36:	dcf2      	bgt.n	8004a1e <_printf_i+0x212>
 8004a38:	e7eb      	b.n	8004a12 <_printf_i+0x206>
 8004a3a:	2500      	movs	r5, #0
 8004a3c:	f104 0619 	add.w	r6, r4, #25
 8004a40:	e7f5      	b.n	8004a2e <_printf_i+0x222>
 8004a42:	bf00      	nop
 8004a44:	08004be5 	.word	0x08004be5
 8004a48:	08004bf6 	.word	0x08004bf6

08004a4c <memmove>:
 8004a4c:	4288      	cmp	r0, r1
 8004a4e:	b510      	push	{r4, lr}
 8004a50:	eb01 0402 	add.w	r4, r1, r2
 8004a54:	d902      	bls.n	8004a5c <memmove+0x10>
 8004a56:	4284      	cmp	r4, r0
 8004a58:	4623      	mov	r3, r4
 8004a5a:	d807      	bhi.n	8004a6c <memmove+0x20>
 8004a5c:	1e43      	subs	r3, r0, #1
 8004a5e:	42a1      	cmp	r1, r4
 8004a60:	d008      	beq.n	8004a74 <memmove+0x28>
 8004a62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a6a:	e7f8      	b.n	8004a5e <memmove+0x12>
 8004a6c:	4402      	add	r2, r0
 8004a6e:	4601      	mov	r1, r0
 8004a70:	428a      	cmp	r2, r1
 8004a72:	d100      	bne.n	8004a76 <memmove+0x2a>
 8004a74:	bd10      	pop	{r4, pc}
 8004a76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a7e:	e7f7      	b.n	8004a70 <memmove+0x24>

08004a80 <_sbrk_r>:
 8004a80:	b538      	push	{r3, r4, r5, lr}
 8004a82:	4d06      	ldr	r5, [pc, #24]	@ (8004a9c <_sbrk_r+0x1c>)
 8004a84:	2300      	movs	r3, #0
 8004a86:	4604      	mov	r4, r0
 8004a88:	4608      	mov	r0, r1
 8004a8a:	602b      	str	r3, [r5, #0]
 8004a8c:	f7fc fbc8 	bl	8001220 <_sbrk>
 8004a90:	1c43      	adds	r3, r0, #1
 8004a92:	d102      	bne.n	8004a9a <_sbrk_r+0x1a>
 8004a94:	682b      	ldr	r3, [r5, #0]
 8004a96:	b103      	cbz	r3, 8004a9a <_sbrk_r+0x1a>
 8004a98:	6023      	str	r3, [r4, #0]
 8004a9a:	bd38      	pop	{r3, r4, r5, pc}
 8004a9c:	2000136c 	.word	0x2000136c

08004aa0 <memcpy>:
 8004aa0:	440a      	add	r2, r1
 8004aa2:	4291      	cmp	r1, r2
 8004aa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004aa8:	d100      	bne.n	8004aac <memcpy+0xc>
 8004aaa:	4770      	bx	lr
 8004aac:	b510      	push	{r4, lr}
 8004aae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ab2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ab6:	4291      	cmp	r1, r2
 8004ab8:	d1f9      	bne.n	8004aae <memcpy+0xe>
 8004aba:	bd10      	pop	{r4, pc}

08004abc <_realloc_r>:
 8004abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ac0:	4680      	mov	r8, r0
 8004ac2:	4615      	mov	r5, r2
 8004ac4:	460c      	mov	r4, r1
 8004ac6:	b921      	cbnz	r1, 8004ad2 <_realloc_r+0x16>
 8004ac8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004acc:	4611      	mov	r1, r2
 8004ace:	f7ff bc4b 	b.w	8004368 <_malloc_r>
 8004ad2:	b92a      	cbnz	r2, 8004ae0 <_realloc_r+0x24>
 8004ad4:	f7ff fbdc 	bl	8004290 <_free_r>
 8004ad8:	2400      	movs	r4, #0
 8004ada:	4620      	mov	r0, r4
 8004adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ae0:	f000 f81a 	bl	8004b18 <_malloc_usable_size_r>
 8004ae4:	4285      	cmp	r5, r0
 8004ae6:	4606      	mov	r6, r0
 8004ae8:	d802      	bhi.n	8004af0 <_realloc_r+0x34>
 8004aea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004aee:	d8f4      	bhi.n	8004ada <_realloc_r+0x1e>
 8004af0:	4629      	mov	r1, r5
 8004af2:	4640      	mov	r0, r8
 8004af4:	f7ff fc38 	bl	8004368 <_malloc_r>
 8004af8:	4607      	mov	r7, r0
 8004afa:	2800      	cmp	r0, #0
 8004afc:	d0ec      	beq.n	8004ad8 <_realloc_r+0x1c>
 8004afe:	42b5      	cmp	r5, r6
 8004b00:	462a      	mov	r2, r5
 8004b02:	4621      	mov	r1, r4
 8004b04:	bf28      	it	cs
 8004b06:	4632      	movcs	r2, r6
 8004b08:	f7ff ffca 	bl	8004aa0 <memcpy>
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	4640      	mov	r0, r8
 8004b10:	f7ff fbbe 	bl	8004290 <_free_r>
 8004b14:	463c      	mov	r4, r7
 8004b16:	e7e0      	b.n	8004ada <_realloc_r+0x1e>

08004b18 <_malloc_usable_size_r>:
 8004b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b1c:	1f18      	subs	r0, r3, #4
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	bfbc      	itt	lt
 8004b22:	580b      	ldrlt	r3, [r1, r0]
 8004b24:	18c0      	addlt	r0, r0, r3
 8004b26:	4770      	bx	lr

08004b28 <_init>:
 8004b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2a:	bf00      	nop
 8004b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b2e:	bc08      	pop	{r3}
 8004b30:	469e      	mov	lr, r3
 8004b32:	4770      	bx	lr

08004b34 <_fini>:
 8004b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b36:	bf00      	nop
 8004b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b3a:	bc08      	pop	{r3}
 8004b3c:	469e      	mov	lr, r3
 8004b3e:	4770      	bx	lr
